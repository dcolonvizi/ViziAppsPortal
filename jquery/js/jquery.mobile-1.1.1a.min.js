(function (a, b, c) { if (typeof define === "function" && define.amd) { define(["jquery"], function (d) { c(d, a, b); return d.mobile }) } else { c(a.jQuery, a, b) } })(this, document, function (a, b, c, d) { (function (a, b, c, d) { function w(a) { while (a && typeof a.originalEvent !== "undefined") { a = a.originalEvent } return a } function x(b, c) { var e = b.type, f, g, i, k, l, m, n, o; b = a.Event(b); b.type = c; f = b.originalEvent; g = a.event.props; if (e.search(/^(mouse|click)/) > -1) { g = j } if (f) { for (n = g.length, k; n; ) { k = g[--n]; b[k] = f[k] } } if (e.search(/mouse(down|up)|click/) > -1 && !b.which) { b.which = 1 } if (e.search(/^touch/) !== -1) { i = w(f); e = i.touches; l = i.changedTouches; m = e && e.length ? e[0] : l && l.length ? l[0] : d; if (m) { for (o = 0, len = h.length; o < len; o++) { k = h[o]; b[k] = m[k] } } } return b } function y(b) { var c = {}, d, f; while (b) { d = a.data(b, e); for (f in d) { if (d[f]) { c[f] = c.hasVirtualBinding = true } } b = b.parentNode } return c } function z(b, c) { var d; while (b) { d = a.data(b, e); if (d && (!c || d[c])) { return b } b = b.parentNode } return null } function A() { r = false } function B() { r = true } function C() { v = 0; p.length = 0; q = false; B() } function D() { A() } function E() { F(); l = setTimeout(function () { l = 0; C() }, a.vmouse.resetTimerDuration) } function F() { if (l) { clearTimeout(l); l = 0 } } function G(b, c, d) { var e; if (d && d[b] || !d && z(c.target, b)) { e = x(c, b); a(c.target).trigger(e) } return e } function H(b) { var c = a.data(b.target, f); if (!q && (!v || v !== c)) { var d = G("v" + b.type, b); if (d) { if (d.isDefaultPrevented()) { b.preventDefault() } if (d.isPropagationStopped()) { b.stopPropagation() } if (d.isImmediatePropagationStopped()) { b.stopImmediatePropagation() } } } } function I(b) { var c = w(b).touches, d, e; if (c && c.length === 1) { d = b.target; e = y(d); if (e.hasVirtualBinding) { v = u++; a.data(d, f, v); F(); D(); o = false; var g = w(b).touches[0]; m = g.pageX; n = g.pageY; G("vmouseover", b, e); G("vmousedown", b, e) } } } function J(a) { if (r) { return } if (!o) { G("vmousecancel", a, y(a.target)) } o = true; E() } function K(b) { if (r) { return } var c = w(b).touches[0], d = o, e = a.vmouse.moveDistanceThreshold; o = o || Math.abs(c.pageX - m) > e || Math.abs(c.pageY - n) > e, flags = y(b.target); if (o && !d) { G("vmousecancel", b, flags) } G("vmousemove", b, flags); E() } function L(a) { if (r) { return } B(); var b = y(a.target), c; G("vmouseup", a, b); if (!o) { var d = G("vclick", a, b); if (d && d.isDefaultPrevented()) { c = w(a).changedTouches[0]; p.push({ touchID: v, x: c.clientX, y: c.clientY }); q = true } } G("vmouseout", a, b); o = false; E() } function M(b) { var c = a.data(b, e), d; if (c) { for (d in c) { if (c[d]) { return true } } } return false } function N() { } function O(b) { var c = b.substr(1); return { setup: function (d, f) { if (!M(this)) { a.data(this, e, {}) } var g = a.data(this, e); g[b] = true; k[b] = (k[b] || 0) + 1; if (k[b] === 1) { t.bind(c, H) } a(this).bind(c, N); if (s) { k["touchstart"] = (k["touchstart"] || 0) + 1; if (k["touchstart"] === 1) { t.bind("touchstart", I).bind("touchend", L).bind("touchmove", K).bind("scroll", J) } } }, teardown: function (d, f) { --k[b]; if (!k[b]) { t.unbind(c, H) } if (s) { --k["touchstart"]; if (!k["touchstart"]) { t.unbind("touchstart", I).unbind("touchmove", K).unbind("touchend", L).unbind("scroll", J) } } var g = a(this), h = a.data(this, e); if (h) { h[b] = false } g.unbind(c, N); if (!M(this)) { g.removeData(e) } } } } var e = "virtualMouseBindings", f = "virtualTouchID", g = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "), h = "clientX clientY pageX pageY screenX screenY".split(" "), i = a.event.mouseHooks ? a.event.mouseHooks.props : [], j = a.event.props.concat(i), k = {}, l = 0, m = 0, n = 0, o = false, p = [], q = false, r = false, s = "addEventListener" in c, t = a(c), u = 1, v = 0; a.vmouse = { moveDistanceThreshold: 10, clickDistanceThreshold: 10, resetTimerDuration: 1500 }; for (var P = 0; P < g.length; P++) { a.event.special[g[P]] = O(g[P]) } if (s) { c.addEventListener("click", function (b) { var c = p.length, d = b.target, e, g, h, i, j, k; if (c) { e = b.clientX; g = b.clientY; threshold = a.vmouse.clickDistanceThreshold; h = d; while (h) { for (i = 0; i < c; i++) { j = p[i]; k = 0; if (h === d && Math.abs(j.x - e) < threshold && Math.abs(j.y - g) < threshold || a.data(h, f) === j.touchID) { b.preventDefault(); b.stopPropagation(); return } } h = h.parentNode } } }, true) } })(a, b, c); (function (a, b, d) { function k(a) { a = a || location.href; return "#" + a.replace(/^[^#]*#?(.*)$/, "$1") } var e = "hashchange", f = c, g, h = a.event.special, i = f.documentMode, j = "on" + e in b && (i === d || i > 7); a.fn[e] = function (a) { return a ? this.bind(e, a) : this.trigger(e) }; a.fn[e].delay = 50; h[e] = a.extend(h[e], { setup: function () { if (j) { return false } a(g.start) }, teardown: function () { if (j) { return false } a(g.stop) } }); g = function () { function n() { var c = k(), d = m(h); if (c !== h) { l(h = c, d); a(b).trigger(e) } else if (d !== h) { location.href = location.href.replace(/#.*/, "") + d } g = setTimeout(n, a.fn[e].delay) } var c = {}, g, h = k(), i = function (a) { return a }, l = i, m = i; c.start = function () { g || n() }; c.stop = function () { g && clearTimeout(g); g = d }; a.browser.msie && !j && function () { var b, d; c.start = function () { if (!b) { d = a.fn[e].src; d = d && d + k(); b = a('<iframe tabindex="-1" title="empty"/>').hide().one("load", function () { d || l(k()); n() }).attr("src", d || "javascript:0").insertAfter("body")[0].contentWindow; f.onpropertychange = function () { try { if (event.propertyName === "title") { b.document.title = f.title } } catch (a) { } } } }; c.stop = i; m = function () { return k(b.location.href) }; l = function (c, d) { var g = b.document, h = a.fn[e].domain; if (c !== d) { g.title = f.title; g.open(); h && g.write('<script>document.domain="' + h + '"</script>'); g.close(); b.location.hash = c } } } (); return c } () })(a, this); (function (a, b) { if (a.cleanData) { var c = a.cleanData; a.cleanData = function (b) { for (var d = 0, e; (e = b[d]) != null; d++) { a(e).triggerHandler("remove") } c(b) } } else { var d = a.fn.remove; a.fn.remove = function (b, c) { return this.each(function () { if (!c) { if (!b || a.filter(b, [this]).length) { a("*", this).add([this]).each(function () { a(this).triggerHandler("remove") }) } } return d.call(a(this), b, c) }) } } a.widget = function (b, c, d) { var e = b.split(".")[0], f; b = b.split(".")[1]; f = e + "-" + b; if (!d) { d = c; c = a.Widget } a.expr[":"][f] = function (c) { return !!a.data(c, b) }; a[e] = a[e] || {}; a[e][b] = function (a, b) { if (arguments.length) { this._createWidget(a, b) } }; var g = new c; g.options = a.extend(true, {}, g.options); a[e][b].prototype = a.extend(true, g, { namespace: e, widgetName: b, widgetEventPrefix: a[e][b].prototype.widgetEventPrefix || b, widgetBaseClass: f }, d); a.widget.bridge(b, a[e][b]) }; a.widget.bridge = function (c, d) { a.fn[c] = function (e) { var f = typeof e === "string", g = Array.prototype.slice.call(arguments, 1), h = this; e = !f && g.length ? a.extend.apply(null, [true, e].concat(g)) : e; if (f && e.charAt(0) === "_") { return h } if (f) { this.each(function () { var d = a.data(this, c); if (!d) { throw "cannot call methods on " + c + " prior to initialization; " + "attempted to call method '" + e + "'" } if (!a.isFunction(d[e])) { throw "no such method '" + e + "' for " + c + " widget instance" } var f = d[e].apply(d, g); if (f !== d && f !== b) { h = f; return false } }) } else { this.each(function () { var b = a.data(this, c); if (b) { b.option(e || {})._init() } else { a.data(this, c, new d(e, this)) } }) } return h } }; a.Widget = function (a, b) { if (arguments.length) { this._createWidget(a, b) } }; a.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", options: { disabled: false }, _createWidget: function (b, c) { a.data(c, this.widgetName, this); this.element = a(c); this.options = a.extend(true, {}, this.options, this._getCreateOptions(), b); var d = this; this.element.bind("remove." + this.widgetName, function () { d.destroy() }); this._create(); this._trigger("create"); this._init() }, _getCreateOptions: function () { var b = {}; if (a.metadata) { b = a.metadata.get(element)[this.widgetName] } return b }, _create: function () { }, _init: function () { }, destroy: function () { this.element.unbind("." + this.widgetName).removeData(this.widgetName); this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + "ui-state-disabled") }, widget: function () { return this.element }, option: function (c, d) { var e = c; if (arguments.length === 0) { return a.extend({}, this.options) } if (typeof c === "string") { if (d === b) { return this.options[c] } e = {}; e[c] = d } this._setOptions(e); return this }, _setOptions: function (b) { var c = this; a.each(b, function (a, b) { c._setOption(a, b) }); return this }, _setOption: function (a, b) { this.options[a] = b; if (a === "disabled") { this.widget()[b ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled" + " " + "ui-state-disabled").attr("aria-disabled", b) } return this }, enable: function () { return this._setOption("disabled", false) }, disable: function () { return this._setOption("disabled", true) }, _trigger: function (b, c, d) { var e = this.options[b]; c = a.Event(c); c.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase(); d = d || {}; if (c.originalEvent) { for (var f = a.event.props.length, g; f; ) { g = a.event.props[--f]; c[g] = c.originalEvent[g] } } this.element.trigger(c, d); return !(a.isFunction(e) && e.call(this.element[0], c, d) === false || c.isDefaultPrevented()) } } })(a); (function (a, b) { a.widget("mobile.widget", { _createWidget: function () { a.Widget.prototype._createWidget.apply(this, arguments); this._trigger("init") }, _getCreateOptions: function () { var c = this.element, d = {}; a.each(this.options, function (a) { var e = c.jqmData(a.replace(/[A-Z]/g, function (a) { return "-" + a.toLowerCase() })); if (e !== b) { d[a] = e } }); return d }, enhanceWithin: function (b, c) { this.enhance(a(this.options.initSelector, a(b)), c) }, enhance: function (b, c) { var d, e, f = a(b), g = this; f = a.mobile.enhanceable(f); if (c && f.length) { d = a.mobile.closestPageData(f); e = d && d.keepNativeSelector() || ""; f = f.not(e) } f[this.widgetName]() }, raise: function (a) { throw "Widget [" + this.widgetName + "]: " + a } }) })(a); (function (a, b, d) { var e = {}; a.mobile = a.extend({}, { version: "1.1.1", ns: "", subPageUrlKey: "ui-page", activePageClass: "ui-page-active", activeBtnClass: "ui-btn-active", focusClass: "ui-focus", ajaxEnabled: true, hashListeningEnabled: true, linkBindingEnabled: true, defaultPageTransition: "fade", maxTransitionWidth: false, minScrollBack: 250, touchOverflowEnabled: false, defaultDialogTransition: "pop", loadingMessage: "loading", pageLoadErrorMessage: "Error Loading Page", loadingMessageTextVisible: false, loadingMessageTheme: "a", pageLoadErrorMessageTheme: "e", autoInitializePage: true, pushStateEnabled: true, ignoreContentEnabled: false, orientationChangeEnabled: true, buttonMarkup: { hoverDelay: 200 }, keyCode: { ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, COMMAND: 91, COMMAND_LEFT: 91, COMMAND_RIGHT: 93, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, MENU: 93, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38, WINDOWS: 91 }, silentScroll: function (d) { if (a.type(d) !== "number") { d = a.mobile.defaultHomeScroll } a.event.special.scrollstart.enabled = false; setTimeout(function () { b.scrollTo(0, d); a(c).trigger("silentscroll", { x: 0, y: d }) }, 20); setTimeout(function () { a.event.special.scrollstart.enabled = true }, 150) }, nsNormalizeDict: e, nsNormalize: function (b) { if (!b) { return } return e[b] || (e[b] = a.camelCase(a.mobile.ns + b)) }, getInheritedTheme: function (a, b) { var c = a[0], d = "", e = /ui-(bar|body|overlay)-([a-z])\b/, f, g; while (c) { f = c.className || ""; if (f && (g = e.exec(f)) && (d = g[2])) { break } c = c.parentNode } return d || b || "a" }, closestPageData: function (a) { return a.closest(':jqmData(role="page"), :jqmData(role="dialog")').data("page") }, enhanceable: function (a) { return this.haveParents(a, "enhance") }, hijackable: function (a) { return this.haveParents(a, "ajax") }, haveParents: function (b, c) { if (!a.mobile.ignoreContentEnabled) { return b } var d = b.length, e = a(), f, g, h; for (var i = 0; i < d; i++) { g = b.eq(i); h = false; f = b[i]; while (f) { var j = f.getAttribute ? f.getAttribute("data-" + a.mobile.ns + c) : ""; if (j === "false") { h = true; break } f = f.parentNode } if (!h) { e = e.add(g) } } return e }, getScreenHeight: function () { return b.innerHeight || a(b).height() } }, a.mobile); a.fn.jqmData = function (b, c) { var d; if (typeof b != "undefined") { if (b) { b = a.mobile.nsNormalize(b) } d = this.data.apply(this, arguments.length < 2 ? [b] : [b, c]) } return d }; a.jqmData = function (b, c, d) { var e; if (typeof c != "undefined") { e = a.data(b, c ? a.mobile.nsNormalize(c) : c, d) } return e }; a.fn.jqmRemoveData = function (b) { return this.removeData(a.mobile.nsNormalize(b)) }; a.jqmRemoveData = function (b, c) { return a.removeData(b, a.mobile.nsNormalize(c)) }; a.fn.removeWithDependents = function () { a.removeWithDependents(this) }; a.removeWithDependents = function (b) { var c = a(b); (c.jqmData("dependents") || a()).remove(); c.remove() }; a.fn.addDependents = function (b) { a.addDependents(a(this), b) }; a.addDependents = function (b, c) { var d = a(b).jqmData("dependents") || a(); a(b).jqmData("dependents", a.merge(d, c)) }; a.fn.getEncodedText = function () { return a("<div/>").text(a(this).text()).html() }; a.fn.jqmEnhanceable = function () { return a.mobile.enhanceable(this) }; a.fn.jqmHijackable = function () { return a.mobile.hijackable(this) }; var f = a.find, g = /:jqmData\(([^)]*)\)/g; a.find = function (b, c, d, e) { b = b.replace(g, "[data-" + (a.mobile.ns || "") + "$1]"); return f.call(this, b, c, d, e) }; a.extend(a.find, f); a.find.matches = function (b, c) { return a.find(b, null, null, c) }; a.find.matchesSelector = function (b, c) { return a.find(c, null, null, [b]).length > 0 } })(a, this); (function (a, d) { var e = a(b), f = a("html"); a.mobile.media = function () { var b = {}, d = a("<div id='jquery-mediatest'></div>"), e = a("<body>").append(d); return function (a) { if (!(a in b)) { var g = c.createElement("style"), h = "@media " + a + " { #jquery-mediatest { position:absolute; } }"; g.type = "text/css"; if (g.styleSheet) { g.styleSheet.cssText = h } else { g.appendChild(c.createTextNode(h)) } f.prepend(e).prepend(g); b[a] = d.css("position") === "absolute"; e.add(g).remove() } return b[a] } } () })(a); (function (a, d) { function m(a) { var b = a.charAt(0).toUpperCase() + a.substr(1), c = (a + " " + g.join(b + " ") + b).split(" "); for (var e in c) { if (f[c[e]] !== d) { return true } } } function n(a, b, d) { var e = c.createElement("div"), f = function (a) { return a.charAt(0).toUpperCase() + a.substr(1) }, h = function (a) { return "-" + a.charAt(0).toLowerCase() + a.substr(1) + "-" }, j = function (c) { var d = h(c) + a + ": " + b + ";", g = f(c), i = g + f(a); e.setAttribute("style", d); if (!!e.style[i]) { l = true } }, k = d ? [d] : g, l; for (i = 0; i < k.length; i++) { j(k[i]) } return !!l } function o() { var b = "transform-3d"; return n("perspective", "10px", "moz") || a.mobile.media("(-" + g.join("-" + b + "),(-") + "-" + b + "),(" + b + ")") } function p() { var b = location.protocol + "//" + location.host + location.pathname + "ui-dir/", c = a("head base"), d = null, f = "", g, h; if (!c.length) { c = d = a("<base>", { href: b }).appendTo("head") } else { f = c.attr("href") } g = a("<a href='testurl' />").prependTo(e); h = g[0].href; c[0].href = f || location.pathname; if (d) { d.remove() } return h.indexOf(b) === 0 } function q() { var a = c.createElement("x"), d = c.documentElement, e = b.getComputedStyle, f; if (!("pointerEvents" in a.style)) { return false } a.style.pointerEvents = "auto"; a.style.pointerEvents = "x"; d.appendChild(a); f = e && e(a, "").pointerEvents === "auto"; d.removeChild(a); return !!f } var e = a("<body>").prependTo("html"), f = e[0].style, g = ["Webkit", "Moz", "O"], h = "palmGetResource" in b, j = b.opera, k = b.operamini && {}.toString.call(b.operamini) === "[object OperaMini]", l = b.blackberry; a.extend(a.mobile, { browser: {} }); a.mobile.browser.ie = function () { var a = 3, b = c.createElement("div"), d = b.all || []; while (b.innerHTML = "<!--[if gt IE " + ++a + "]><br><![endif]-->", d[0]) { } return a > 4 ? a : !a } (); a.extend(a.support, { orientation: "orientation" in b && "onorientationchange" in b, touch: "ontouchend" in c, cssTransitions: "WebKitTransitionEvent" in b || n("transition", "height 100ms linear") && !j, pushState: "pushState" in history && "replaceState" in history, mediaquery: a.mobile.media("only all"), cssPseudoElement: !!m("content"), touchOverflow: !!m("overflowScrolling"), cssTransform3d: o(), boxShadow: !!m("boxShadow") && !l, scrollTop: ("pageXOffset" in b || "scrollTop" in c.documentElement || "scrollTop" in e[0]) && !h && !k, dynamicBaseTag: p(), cssPointerEvents: q() }); e.remove(); var r = function () { var a = b.navigator.userAgent; return a.indexOf("Nokia") > -1 && (a.indexOf("Symbian/3") > -1 || a.indexOf("Series60/5") > -1) && a.indexOf("AppleWebKit") > -1 && a.match(/(BrowserNG|NokiaBrowser)\/7\.[0-3]/) } (); a.mobile.gradeA = function () { return a.support.mediaquery || a.mobile.browser.ie && a.mobile.browser.ie >= 7 }; a.mobile.ajaxBlacklist = b.blackberry && !b.WebKitPoint || k || r; if (r) { a(function () { a("head link[rel='stylesheet']").attr("rel", "alternate stylesheet").attr("rel", "stylesheet") }) } if (!a.support.boxShadow) { a("html").addClass("ui-mobile-nosupport-boxshadow") } })(a); (function (b, d, e) { function k(a, c, d) { var e = d.type; d.type = c; b.event.handle.call(a, d); d.type = e } b.each(("touchstart touchmove touchend orientationchange throttledresize " + "tap taphold swipe swipeleft swiperight scrollstart scrollstop").split(" "), function (a, c) { b.fn[c] = function (a) { return a ? this.bind(c, a) : this.trigger(c) }; b.attrFn[c] = true }); var f = b.support.touch, g = "touchmove scroll", h = f ? "touchstart" : "mousedown", i = f ? "touchend" : "mouseup", j = f ? "touchmove" : "mousemove"; b.event.special.scrollstart = { enabled: true, setup: function () { function f(b, c) { d = c; k(a, d ? "scrollstart" : "scrollstop", b) } var a = this, c = b(a), d, e; c.bind(g, function (a) { if (!b.event.special.scrollstart.enabled) { return } if (!d) { f(a, true) } clearTimeout(e); e = setTimeout(function () { f(a, false) }, 50) }) } }; b.event.special.tap = { setup: function () { var a = this, d = b(a); d.bind("vmousedown", function (e) { function i() { clearTimeout(h) } function j() { i(); d.unbind("vclick", l).unbind("vmouseup", i); b(c).unbind("vmousecancel", j) } function l(b) { j(); if (f == b.target) { k(a, "tap", b) } } if (e.which && e.which !== 1) { return false } var f = e.target, g = e.originalEvent, h; d.bind("vmouseup", i).bind("vclick", l); b(c).bind("vmousecancel", j); h = setTimeout(function () { k(a, "taphold", b.Event("taphold", { target: f })) }, 750) }) } }; b.event.special.swipe = { scrollSupressionThreshold: 10, durationThreshold: 1e3, horizontalDistanceThreshold: 30, verticalDistanceThreshold: 75, setup: function () { var a = this, c = b(a); c.bind(h, function (a) { function h(a) { if (!f) { return } var c = a.originalEvent.touches ? a.originalEvent.touches[0] : a; g = { time: (new Date).getTime(), coords: [c.pageX, c.pageY] }; if (Math.abs(f.coords[0] - g.coords[0]) > b.event.special.swipe.scrollSupressionThreshold) { a.preventDefault() } } var d = a.originalEvent.touches ? a.originalEvent.touches[0] : a, f = { time: (new Date).getTime(), coords: [d.pageX, d.pageY], origin: b(a.target) }, g; c.bind(j, h).one(i, function (a) { c.unbind(j, h); if (f && g) { if (g.time - f.time < b.event.special.swipe.durationThreshold && Math.abs(f.coords[0] - g.coords[0]) > b.event.special.swipe.horizontalDistanceThreshold && Math.abs(f.coords[1] - g.coords[1]) < b.event.special.swipe.verticalDistanceThreshold) { f.origin.trigger("swipe").trigger(f.coords[0] > g.coords[0] ? "swipeleft" : "swiperight") } } f = g = e }) }) } }; (function (a, b) { function n() { var a = f(); if (a !== g) { g = a; d.trigger("orientationchange") } } var d = a(b), e, f, g, h, i, j = { 0: true, 180: true }; if (a.support.orientation) { var k = b.innerWidth || a(b).width(), l = b.innerHeight || a(b).height(), m = 50; h = k > l && k - l > m; i = j[b.orientation]; if (h && i || !h && !i) { j = { "-90": true, 90: true} } } a.event.special.orientationchange = e = { setup: function () { if (a.support.orientation && a.mobile.orientationChangeEnabled) { return false } g = f(); d.bind("throttledresize", n) }, teardown: function () { if (a.support.orientation && a.mobile.orientationChangeEnabled) { return false } d.unbind("throttledresize", n) }, add: function (a) { var b = a.handler; a.handler = function (a) { a.orientation = f(); return b.apply(this, arguments) } } }; a.event.special.orientationchange.orientation = f = function () { var d = true, e = c.documentElement; if (a.support.orientation) { d = j[b.orientation] } else { d = e && e.clientWidth / e.clientHeight < 1.1 } return d ? "portrait" : "landscape" } })(a, d); (function () { b.event.special.throttledresize = { setup: function () { b(this).bind("resize", c) }, teardown: function () { b(this).unbind("resize", c) } }; var a = 250, c = function () { f = (new Date).getTime(); g = f - d; if (g >= a) { d = f; b(this).trigger("throttledresize") } else { if (e) { clearTimeout(e) } e = setTimeout(c, a - g) } }, d = 0, e, f, g })(); b.each({ scrollstop: "scrollstart", taphold: "tap", swipeleft: "swipe", swiperight: "swipe" }, function (a, c) { b.event.special[a] = { setup: function () { b(this).bind(c, b.noop) } } }) })(a, this); (function (a, b) { a.widget("mobile.page", a.mobile.widget, { options: { theme: "c", domCache: false, keepNativeDefault: ":jqmData(role='none'), :jqmData(role='nojs')" }, _create: function () { var a = this; if (a._trigger("beforecreate") === false) { return false } a.element.attr("tabindex", "0").addClass("ui-page ui-body-" + a.options.theme).bind("pagebeforehide", function () { a.removeContainerBackground() }).bind("pagebeforeshow", function () { a.setContainerBackground() }) }, removeContainerBackground: function () { a.mobile.pageContainer.removeClass("ui-overlay-" + a.mobile.getInheritedTheme(this.element.parent())) }, setContainerBackground: function (b) { if (this.options.theme) { a.mobile.pageContainer.addClass("ui-overlay-" + (b || this.options.theme)) } }, keepNativeSelector: function () { var b = this.options, c = b.keepNative && a.trim(b.keepNative); if (c && b.keepNative !== b.keepNativeDefault) { return [b.keepNative, b.keepNativeDefault].join(", ") } return b.keepNativeDefault } }) })(a); (function (a, b, c) { var d = function (d) { if (d === c) { d = true } return function (c, e, f, g) { var h = new a.Deferred, i = e ? " reverse" : "", j = a.mobile.urlHistory.getActive(), k = j.lastScroll || a.mobile.defaultHomeScroll, l = a.mobile.getScreenHeight(), m = a.mobile.maxTransitionWidth !== false && a(b).width() > a.mobile.maxTransitionWidth, n = !a.support.cssTransitions || m || !c || c === "none" || Math.max(a(b).scrollTop(), k) > a.mobile.getMaxScrollForTransition(), o = " ui-page-pre-in", p = function () { a.mobile.pageContainer.toggleClass("ui-mobile-viewport-transitioning viewport-" + c) }, q = function () { a.event.special.scrollstart.enabled = false; b.scrollTo(0, k); setTimeout(function () { a.event.special.scrollstart.enabled = true }, 150) }, r = function () { g.removeClass(a.mobile.activePageClass + " out in reverse " + c).height("") }, s = function () { if (!d) { t() } else { g.animationComplete(t) } g.height(l + a(b).scrollTop()).addClass(c + " out" + i) }, t = function () { if (g && d) { r() } u() }, u = function () { f.css("z-index", -10); f.addClass(a.mobile.activePageClass + o); a.mobile.focusPage(f); f.height(l + k); q(); f.css("z-index", ""); if (!n) { f.animationComplete(v) } f.removeClass(o).addClass(c + " in" + i); if (n) { v() } }, v = function () { if (!d) { if (g) { r() } } f.removeClass("out in reverse " + c).height(""); p(); if (a(b).scrollTop() !== k) { q() } h.resolve(c, e, f, g, true) }; p(); if (g && !n) { s() } else { t() } return h.promise() } }; var e = d(), f = d(false), g = function () { return a.mobile.getScreenHeight() * 3 }; a.mobile.defaultTransitionHandler = e; a.mobile.transitionHandlers = { "default": a.mobile.defaultTransitionHandler, sequential: e, simultaneous: f }; a.mobile.transitionFallbacks = {}; a.mobile.getMaxScrollForTransition = a.mobile.getMaxScrollForTransition || g })(a, this); (function (a, d) { function u(b) { if (!!i && (!i.closest(".ui-page-active").length || b)) { i.removeClass(a.mobile.activeBtnClass) } i = null } function v() { m = false; if (l.length > 0) { a.mobile.changePage.apply(null, l.pop()) } } function z(b, c, d, e) { if (c) { c.data("page")._trigger("beforehide", null, { nextPage: b }) } b.data("page")._trigger("beforeshow", null, { prevPage: c || a("") }); a.mobile.hidePageLoadingMsg(); if (d && !a.support.cssTransform3d && a.mobile.transitionFallbacks[d]) { d = a.mobile.transitionFallbacks[d] } var f = a.mobile.transitionHandlers[d || "default"] || a.mobile.defaultTransitionHandler, g = f(d, e, b, c); g.done(function () { if (c) { c.data("page")._trigger("hide", null, { nextPage: b }) } b.data("page")._trigger("show", null, { prevPage: c || a("") }) }); return g } function A() { var b = a("." + a.mobile.activePageClass), c = parseFloat(b.css("padding-top")), d = parseFloat(b.css("padding-bottom")), e = parseFloat(b.css("border-top-width")), f = parseFloat(b.css("border-bottom-width")); b.css("min-height", s() - c - d - e - f) } function B(b, c) { if (c) { b.attr("data-" + a.mobile.ns + "role", c) } b.page() } function C(a) { while (a) { if (typeof a.nodeName === "string" && a.nodeName.toLowerCase() == "a") { break } a = a.parentNode } return a } function D(b) { var c = a(b).closest(".ui-page").jqmData("url"), d = q.hrefNoHash; if (!c || !h.isPath(c)) { c = d } return h.makeUrlAbsolute(c, d) } var e = a(b), f = a("html"), g = a("head"), h = { urlParseRE: /^(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/, parseUrl: function (b) { if (a.type(b) === "object") { return b } var c = h.urlParseRE.exec(b || "") || []; return { href: c[0] || "", hrefNoHash: c[1] || "", hrefNoSearch: c[2] || "", domain: c[3] || "", protocol: c[4] || "", doubleSlash: c[5] || "", authority: c[6] || "", username: c[8] || "", password: c[9] || "", host: c[10] || "", hostname: c[11] || "", port: c[12] || "", pathname: c[13] || "", directory: c[14] || "", filename: c[15] || "", search: c[16] || "", hash: c[17] || ""} }, makePathAbsolute: function (a, b) { if (a && a.charAt(0) === "/") { return a } a = a || ""; b = b ? b.replace(/^\/|(\/[^\/]*|[^\/]+)$/g, "") : ""; var c = b ? b.split("/") : [], d = a.split("/"); for (var e = 0; e < d.length; e++) { var f = d[e]; switch (f) { case ".": break; case "..": if (c.length) { c.pop() } break; default: c.push(f); break } } return "/" + c.join("/") }, isSameDomain: function (a, b) { return h.parseUrl(a).domain === h.parseUrl(b).domain }, isRelativeUrl: function (a) { return h.parseUrl(a).protocol === "" }, isAbsoluteUrl: function (a) { return h.parseUrl(a).protocol !== "" }, makeUrlAbsolute: function (a, b) { if (!h.isRelativeUrl(a)) { return a } var c = h.parseUrl(a), d = h.parseUrl(b), e = c.protocol || d.protocol, f = c.protocol ? c.doubleSlash : c.doubleSlash || d.doubleSlash, g = c.authority || d.authority, i = c.pathname !== "", j = h.makePathAbsolute(c.pathname || d.filename, d.pathname), k = c.search || !i && d.search || "", l = c.hash; return e + f + g + j + k + l }, addSearchParams: function (b, c) { var d = h.parseUrl(b), e = typeof c === "object" ? a.param(c) : c, f = d.search || "?"; return d.hrefNoSearch + f + (f.charAt(f.length - 1) !== "?" ? "&" : "") + e + (d.hash || "") }, convertUrlToDataUrl: function (a) { var b = h.parseUrl(a); if (h.isEmbeddedPage(b)) { return b.hash.split(n)[0].replace(/^#/, "") } else if (h.isSameDomain(b, q)) { return b.hrefNoHash.replace(q.domain, "").split(n)[0] } return a }, get: function (a) { if (a === d) { a = location.hash } return h.stripHash(a).replace(/[^\/]*\.[^\/*]+$/, "") }, getFilePath: function (b) { var c = "&" + a.mobile.subPageUrlKey; return b && b.split(c)[0].split(n)[0] }, set: function (a) { location.hash = a }, isPath: function (a) { return /\//.test(a) }, clean: function (a) { return a.replace(q.domain, "") }, stripHash: function (a) { return a.replace(/^#/, "") }, cleanHash: function (a) { return h.stripHash(a.replace(/\?.*$/, "").replace(n, "")) }, isHashValid: function (a) { return /^#[^#]+$/.test(a) }, isExternal: function (a) { var b = h.parseUrl(a); return b.protocol && b.domain !== p.domain ? true : false }, hasProtocol: function (a) { return /^(:?\w+:)/.test(a) }, isFirstPageUrl: function (b) { var c = h.parseUrl(h.makeUrlAbsolute(b, q)), e = c.hrefNoHash === p.hrefNoHash || r && c.hrefNoHash === q.hrefNoHash, f = a.mobile.firstPage, g = f && f[0] ? f[0].id : d; return e && (!c.hash || c.hash === "#" || g && c.hash.replace(/^#/, "") === g) }, isEmbeddedPage: function (a) { var b = h.parseUrl(a); if (b.protocol !== "") { return b.hash && (b.hrefNoHash === p.hrefNoHash || r && b.hrefNoHash === q.hrefNoHash) } return /^#/.test(b.href) }, isPermittedCrossDomainRequest: function (b, c) { return a.mobile.allowCrossDomainPages && b.protocol === "file:" && c.search(/^https?:/) != -1 } }, i = null, j = { stack: [], activeIndex: 0, getActive: function () { return j.stack[j.activeIndex] }, getPrev: function () { return j.stack[j.activeIndex - 1] }, getNext: function () { return j.stack[j.activeIndex + 1] }, addNew: function (a, b, c, d, e) { if (j.getNext()) { j.clearForward() } j.stack.push({ url: a, transition: b, title: c, pageUrl: d, role: e }); j.activeIndex = j.stack.length - 1 }, clearForward: function () { j.stack = j.stack.slice(0, j.activeIndex + 1) }, directHashChange: function (b) { var c, e, f, g = this.getActive(); a.each(j.stack, function (a, d) { if (b.currentUrl === d.url) { c = a < j.activeIndex; e = !c; f = a } }); this.activeIndex = f !== d ? f : this.activeIndex; if (c) { (b.either || b.isBack)(true) } else if (e) { (b.either || b.isForward)(false) } }, ignoreNextHashChange: false }, k = "[tabindex],a,button:visible,select:visible,input", l = [], m = false, n = "&ui-state=dialog", o = g.children("base"), p = h.parseUrl(location.href), q = o.length ? h.parseUrl(h.makeUrlAbsolute(o.attr("href"), p.href)) : p, r = p.hrefNoHash !== q.hrefNoHash, s = a.mobile.getScreenHeight; var t = a.support.dynamicBaseTag ? { element: o.length ? o : a("<base>", { href: q.hrefNoHash }).prependTo(g), set: function (a) { t.element.attr("href", h.makeUrlAbsolute(a, q)) }, reset: function () { t.element.attr("href", q.hrefNoHash) } } : d; a.mobile.focusPage = function (a) { var b = a.find("[autofocus]"), c = a.find(".ui-title:eq(0)"); if (b.length) { b.focus(); return } if (c.length) { c.focus() } else { a.focus() } }; var w = true, x, y; x = function () { if (!w) { return } var b = a.mobile.urlHistory.getActive(); if (b) { var c = e.scrollTop(); b.lastScroll = c < a.mobile.minScrollBack ? a.mobile.defaultHomeScroll : c } }; y = function () { setTimeout(x, 100) }; e.bind(a.support.pushState ? "popstate" : "hashchange", function () { w = false }); e.one(a.support.pushState ? "popstate" : "hashchange", function () { w = true }); e.one("pagecontainercreate", function () { a.mobile.pageContainer.bind("pagechange", function () { w = true; e.unbind("scrollstop", y); e.bind("scrollstop", y) }) }); e.bind("scrollstop", y); a.fn.animationComplete = function (b) { if (a.support.cssTransitions) { return a(this).one("webkitAnimationEnd animationend", b) } else { setTimeout(b, 0); return a(this) } }; a.mobile.path = h; a.mobile.base = t; a.mobile.urlHistory = j; a.mobile.dialogHashKey = n; a.mobile.allowCrossDomainPages = false; a.mobile.getDocumentUrl = function (b) { return b ? a.extend({}, p) : p.href }; a.mobile.getDocumentBase = function (b) { return b ? a.extend({}, q) : q.href }; a.mobile._bindPageRemove = function () { var b = a(this); if (!b.data("page").options.domCache && b.is(":jqmData(external-page='true')")) { b.bind("pagehide.remove", function () { var b = a(this), c = new a.Event("pageremove"); b.trigger(c); if (!c.isDefaultPrevented()) { b.removeWithDependents() } }) } }; a.mobile.loadPage = function (b, c) { var e = a.Deferred(), f = a.extend({}, a.mobile.loadPage.defaults, c), g = null, i = null, j = function () { var b = a.mobile.activePage && D(a.mobile.activePage); return b || q.hrefNoHash }, k = h.makeUrlAbsolute(b, j()); if (f.data && f.type === "get") { k = h.addSearchParams(k, f.data); f.data = d } if (f.data && f.type === "post") { f.reloadPage = true } var l = h.getFilePath(k), m = h.convertUrlToDataUrl(k); f.pageContainer = f.pageContainer || a.mobile.pageContainer; g = f.pageContainer.children(":jqmData(url='" + m + "')"); if (g.length === 0 && m && !h.isPath(m)) { g = f.pageContainer.children("#" + m).attr("data-" + a.mobile.ns + "url", m) } if (g.length === 0) { if (a.mobile.firstPage && h.isFirstPageUrl(l)) { if (a.mobile.firstPage.parent().length) { g = a(a.mobile.firstPage) } } else if (h.isEmbeddedPage(l)) { e.reject(k, c); return e.promise() } } if (t) { t.reset() } if (g.length) { if (!f.reloadPage) { B(g, f.role); e.resolve(k, c, g); return e.promise() } i = g } var n = f.pageContainer, o = new a.Event("pagebeforeload"), r = { url: b, absUrl: k, dataUrl: m, deferred: e, options: f }; n.trigger(o, r); if (o.isDefaultPrevented()) { return e.promise() } if (f.showLoadMsg) { var s = setTimeout(function () { a.mobile.showPageLoadingMsg() }, f.loadMsgDelay), u = function () { clearTimeout(s); a.mobile.hidePageLoadingMsg() } } if (!(a.mobile.allowCrossDomainPages || h.isSameDomain(p, k))) { e.reject(k, c) } else { a.ajax({ url: l, type: f.type, data: f.data, dataType: "html", success: function (d, j, n) { var o = a("<div></div>"), p = d.match(/<title[^>]*>([^<]*)/) && RegExp.$1, q = new RegExp("(<[^>]+\\bdata-" + a.mobile.ns + "role=[\"']?page[\"']?[^>]*>)"), s = new RegExp("\\bdata-" + a.mobile.ns + "url=[\"']?([^\"'>]*)[\"']?"); if (q.test(d) && RegExp.$1 && s.test(RegExp.$1) && RegExp.$1) { b = l = h.getFilePath(RegExp.$1) } if (t) { t.set(l) } o.get(0).innerHTML = d; g = o.find(":jqmData(role='page'), :jqmData(role='dialog')").first(); if (!g.length) { g = a("<div data-" + a.mobile.ns + "role='page'>" + d.split(/<\/?body[^>]*>/gmi)[1] + "</div>") } if (p && !g.jqmData("title")) { if (~p.indexOf("&")) { p = a("<div>" + p + "</div>").text() } g.jqmData("title", p) } if (!a.support.dynamicBaseTag) { var v = h.get(l); g.find("[src], link[href], a[rel='external'], :jqmData(ajax='false'), a[target]").each(function () { var b = a(this).is("[href]") ? "href" : a(this).is("[src]") ? "src" : "action", c = a(this).attr(b); c = c.replace(location.protocol + "//" + location.host + location.pathname, ""); if (!/^(\w+:|#|\/)/.test(c)) { a(this).attr(b, v + c) } }) } g.attr("data-" + a.mobile.ns + "url", h.convertUrlToDataUrl(l)).attr("data-" + a.mobile.ns + "external-page", true).appendTo(f.pageContainer); g.one("pagecreate", a.mobile._bindPageRemove); B(g, f.role); if (k.indexOf("&" + a.mobile.subPageUrlKey) > -1) { g = f.pageContainer.children(":jqmData(url='" + m + "')") } if (f.showLoadMsg) { u() } r.xhr = n; r.textStatus = j; r.page = g; f.pageContainer.trigger("pageload", r); e.resolve(k, c, g, i) }, error: function (b, d, g) { if (t) { t.set(h.get()) } r.xhr = b; r.textStatus = d; r.errorThrown = g; var i = new a.Event("pageloadfailed"); f.pageContainer.trigger(i, r); if (i.isDefaultPrevented()) { return } if (f.showLoadMsg) { u(); a.mobile.showPageLoadingMsg(a.mobile.pageLoadErrorMessageTheme, a.mobile.pageLoadErrorMessage, true); setTimeout(a.mobile.hidePageLoadingMsg, 1500) } e.reject(k, c) } }) } return e.promise() }; a.mobile.loadPage.defaults = { type: "get", data: d, reloadPage: false, role: d, showLoadMsg: false, pageContainer: d, loadMsgDelay: 50 }; a.mobile.changePage = function (b, e) { if (m) { l.unshift(arguments); return } var f = a.extend({}, a.mobile.changePage.defaults, e); f.pageContainer = f.pageContainer || a.mobile.pageContainer; f.fromPage = f.fromPage || a.mobile.activePage; var g = f.pageContainer, i = new a.Event("pagebeforechange"), k = { toPage: b, options: f }; g.trigger(i, k); if (i.isDefaultPrevented()) { return } b = k.toPage; m = true; if (typeof b == "string") { a.mobile.loadPage(b, f).done(function (b, c, d, e) { m = false; c.duplicateCachedPage = e; a.mobile.changePage(d, c) }).fail(function (a, b) { m = false; u(true); v(); f.pageContainer.trigger("pagechangefailed", k) }); return } if (b[0] === a.mobile.firstPage[0] && !f.dataUrl) { f.dataUrl = p.hrefNoHash } var o = f.fromPage, q = f.dataUrl && h.convertUrlToDataUrl(f.dataUrl) || b.jqmData("url"), r = q, s = h.getFilePath(q), t = j.getActive(), w = j.activeIndex === 0, x = 0, y = c.title, A = f.role === "dialog" || b.jqmData("role") === "dialog"; if (o && o[0] === b[0] && !f.allowSamePageTransition) { m = false; g.trigger("pagechange", k); if (f.fromHashChange) { j.directHashChange({ currentUrl: q, isBack: function () { }, isForward: function () { } }) } return } B(b, f.role); if (f.fromHashChange) { j.directHashChange({ currentUrl: q, isBack: function () { x = -1 }, isForward: function () { x = 1 } }) } try { if (c.activeElement && c.activeElement.nodeName.toLowerCase() != "body") { a(c.activeElement).blur() } else { a("input:focus, textarea:focus, select:focus").blur() } } catch (C) { } var D = false; if (A && t) { if (t.url.indexOf(n) > -1 && !a.mobile.activePage.is(".ui-dialog")) { f.changeHash = false; D = true } q = (t.url || "") + n; if (j.activeIndex === 0 && q === j.initialDst) { q += n } } if (f.changeHash !== false && q) { j.ignoreNextHashChange = true; h.set(q) } var E = !t ? y : b.jqmData("title") || b.children(":jqmData(role='header')").find(".ui-title").getEncodedText(); if (!!E && y == c.title) { y = E } if (!b.jqmData("title")) { b.jqmData("title", y) } f.transition = f.transition || (x && !w ? t.transition : d) || (A ? a.mobile.defaultDialogTransition : a.mobile.defaultPageTransition); if (!x && !D) { j.addNew(q, f.transition, y, r, f.role) } c.title = j.getActive().title; a.mobile.activePage = b; f.reverse = f.reverse || x < 0; z(b, o, f.transition, f.reverse).done(function (c, d, e, h, i) { u(); if (f.duplicateCachedPage) { f.duplicateCachedPage.remove() } if (!i) { a.mobile.focusPage(b) } v(); g.trigger("pagechange", k) }) }; a.mobile.changePage.defaults = { transition: d, reverse: false, changeHash: true, fromHashChange: false, role: d, duplicateCachedPage: d, pageContainer: d, showLoadMsg: true, dataUrl: d, fromPage: d, allowSamePageTransition: false }; a.mobile.navreadyDeferred = a.Deferred(); a.mobile.navreadyDeferred.done(function () { a(c).delegate("form", "submit", function (b) { var c = a(this); if (!a.mobile.ajaxEnabled || c.is(":jqmData(ajax='false')") || !c.jqmHijackable().length) { return } var d = c.attr("method"), e = c.attr("target"), f = c.attr("action"); if (!f) { f = D(c); if (f === q.hrefNoHash) { f = p.hrefNoSearch } } f = h.makeUrlAbsolute(f, D(c)); if (h.isExternal(f) && !h.isPermittedCrossDomainRequest(p, f) || e) { return } a.mobile.changePage(f, { type: d && d.length && d.toLowerCase() || "get", data: c.serialize(), transition: c.jqmData("transition"), direction: c.jqmData("direction"), reloadPage: true }); b.preventDefault() }); a(c).bind("vclick", function (b) { if (b.which > 1 || !a.mobile.linkBindingEnabled) { return } var c = C(b.target); if (!a(c).jqmHijackable().length) { return } if (c) { if (h.parseUrl(c.getAttribute("href") || "#").hash !== "#") { u(true); i = a(c).closest(".ui-btn").not(".ui-disabled"); i.addClass(a.mobile.activeBtnClass) } } }); a(c).bind("click", function (c) { if (!a.mobile.linkBindingEnabled) { return } var e = C(c.target), f = a(e), g; if (!e || c.which > 1 || !f.jqmHijackable().length) { return } g = function () { b.setTimeout(function () { u(true) }, 200) }; if (f.is(":jqmData(rel='back')")) { b.history.back(); return false } var i = D(f), j = h.makeUrlAbsolute(f.attr("href") || "#", i); if (!a.mobile.ajaxEnabled && !h.isEmbeddedPage(j)) { g(); return } if (j.search("#") != -1) { j = j.replace(/[^#]*#/, ""); if (!j) { c.preventDefault(); return } else if (h.isPath(j)) { j = h.makeUrlAbsolute(j, i) } else { j = h.makeUrlAbsolute("#" + j, p.hrefNoHash) } } var k = f.is("[rel='external']") || f.is(":jqmData(ajax='false')") || f.is("[target]"), l = k || h.isExternal(j) && !h.isPermittedCrossDomainRequest(p, j); if (l) { g(); return } var m = f.jqmData("transition"), n = f.jqmData("direction"), o = n && n === "reverse" || f.jqmData("back"), q = f.attr("data-" + a.mobile.ns + "rel") || d; a.mobile.changePage(j, { transition: m, reverse: o, role: q }); c.preventDefault() }); a(c).delegate(".ui-page", "pageshow.prefetch", function () { var b = []; a(this).find("a:jqmData(prefetch)").each(function () { var c = a(this), d = c.attr("href"); if (d && a.inArray(d, b) === -1) { b.push(d); a.mobile.loadPage(d, { role: c.attr("data-" + a.mobile.ns + "rel") }) } }) }); a.mobile._handleHashChange = function (c) { var e = h.stripHash(c), f = a.mobile.urlHistory.stack.length === 0 ? "none" : d, g = { transition: f, changeHash: false, fromHashChange: true }; if (0 === j.stack.length) { j.initialDst = e } if (!a.mobile.hashListeningEnabled || j.ignoreNextHashChange) { j.ignoreNextHashChange = false; return } if (j.stack.length > 1 && e.indexOf(n) > -1 && j.initialDst !== e) { if (!a.mobile.activePage.is(".ui-dialog")) { j.directHashChange({ currentUrl: e, isBack: function () { b.history.back() }, isForward: function () { b.history.forward() } }); return } else { j.directHashChange({ currentUrl: e, either: function (b) { var c = a.mobile.urlHistory.getActive(); e = c.pageUrl; a.extend(g, { role: c.role, transition: c.transition, reverse: b }) } }) } } if (e) { e = typeof e === "string" && !h.isPath(e) ? h.makeUrlAbsolute("#" + e, q) : e; a.mobile.changePage(e, g) } else { a.mobile.changePage(a.mobile.firstPage, g) } }; e.bind("hashchange", function (b, c) { a.mobile._handleHashChange(location.hash) }); a(c).bind("pageshow", A); a(b).bind("throttledresize", A) }) })(a); (function (a, b) { var e = {}, f = e, g = a(b), h = a.mobile.path.parseUrl(location.href), i = a.Deferred(), j = a.Deferred(); a(c).ready(a.proxy(j, "resolve")); a(c).one("mobileinit", a.proxy(i, "resolve")); a.extend(e, { initialFilePath: function () { return h.pathname + h.search } (), hashChangeTimeout: 200, hashChangeEnableTimer: d, initialHref: h.hrefNoHash, state: function () { return { hash: location.hash || "#" + f.initialFilePath, title: c.title, initialHref: f.initialHref} }, resetUIKeys: function (b) { var c = a.mobile.dialogHashKey, d = "&" + a.mobile.subPageUrlKey, e = b.indexOf(c); if (e > -1) { b = b.slice(0, e) + "#" + b.slice(e) } else if (b.indexOf(d) > -1) { b = b.split(d).join("#" + d) } return b }, nextHashChangePrevented: function (b) { a.mobile.urlHistory.ignoreNextHashChange = b; f.onHashChangeDisabled = b }, onHashChange: function (b) { if (f.onHashChangeDisabled) { return } var d, e, g = location.hash, h = a.mobile.path.isPath(g), i = h ? location.href : a.mobile.getDocumentUrl(); g = h ? g.replace("#", "") : g; e = f.state(); d = a.mobile.path.makeUrlAbsolute(g, i); if (h) { d = f.resetUIKeys(d) } history.replaceState(e, c.title, d) }, onPopState: function (b) { var c = b.originalEvent.state, d, e, g; if (c) { clearTimeout(f.hashChangeEnableTimer); f.nextHashChangePrevented(false); a.mobile._handleHashChange(c.hash); f.nextHashChangePrevented(true); f.hashChangeEnableTimer = setTimeout(function () { f.nextHashChangePrevented(false) }, f.hashChangeTimeout) } }, init: function () { g.bind("hashchange", f.onHashChange); g.bind("popstate", f.onPopState); if (location.hash === "") { history.replaceState(f.state(), c.title, location.href) } } }); a.when(j, i, a.mobile.navreadyDeferred).done(function () { if (a.mobile.pushStateEnabled && a.support.pushState) { e.init() } }) })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.pop = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionHandlers.slide = a.mobile.transitionHandlers.simultaneous; a.mobile.transitionFallbacks.slide = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.slidedown = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.slideup = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.flip = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.flow = "fade" })(a, this); (function (a, b, c) { a.mobile.transitionFallbacks.turn = "fade" })(a, this); (function (a, b) { a.mobile.page.prototype.options.degradeInputs = { color: false, date: false, datetime: false, "datetime-local": false, email: false, month: false, number: false, range: "number", search: "text", tel: false, time: false, url: false, week: false }; a(c).bind("pagecreate create", function (b) { var c = a.mobile.closestPageData(a(b.target)), d; if (!c) { return } d = c.options; a(b.target).find("input").not(c.keepNativeSelector()).each(function () { var b = a(this), c = this.getAttribute("type"), e = d.degradeInputs[c] || "text"; if (d.degradeInputs[c]) { var f = a("<div>").html(b.clone()).html(), g = f.indexOf(" type=") > -1, h = g ? /\s+type=["']?\w+['"]?/ : /\/?>/, i = ' type="' + e + '" data-' + a.mobile.ns + 'type="' + c + '"' + (g ? "" : ">"); b.replaceWith(f.replace(h, i)) } }) }) })(a); (function (a, b, d) { a.widget("mobile.dialog", a.mobile.widget, { options: { closeBtnText: "Close", overlayTheme: "a", initSelector: ":jqmData(role='dialog')" }, _create: function () { var b = this, c = this.element, d = a("<a href='#' data-" + a.mobile.ns + "icon='delete' data-" + a.mobile.ns + "iconpos='notext'>" + this.options.closeBtnText + "</a>"), e = a("<div/>", { role: "dialog", "class": "ui-dialog-contain ui-corner-all ui-overlay-shadow" }); c.addClass("ui-dialog ui-overlay-" + this.options.overlayTheme); c.wrapInner(e).children().find(":jqmData(role='header')").prepend(d).end().children(":first-child").addClass("ui-corner-top").end().children(":last-child").addClass("ui-corner-bottom"); d.bind("click", function () { b.close() }); c.bind("vclick submit", function (b) { var c = a(b.target).closest(b.type === "vclick" ? "a" : "form"), d; if (c.length && !c.jqmData("transition")) { d = a.mobile.urlHistory.getActive() || {}; c.attr("data-" + a.mobile.ns + "transition", d.transition || a.mobile.defaultDialogTransition).attr("data-" + a.mobile.ns + "direction", "reverse") } }).bind("pagehide", function (c, d) { b._isClosed = false; a(this).find("." + a.mobile.activeBtnClass).not(".ui-slider-bg").removeClass(a.mobile.activeBtnClass) }).bind("pagebeforeshow", function () { if (b.options.overlayTheme) { b.element.page("removeContainerBackground").page("setContainerBackground", b.options.overlayTheme) } }) }, close: function () { if (!this._isClosed) { this._isClosed = true; if (a.mobile.hashListeningEnabled) { b.history.back() } else { a.mobile.changePage(a.mobile.urlHistory.getPrev().url) } } } }); a(c).delegate(a.mobile.dialog.prototype.options.initSelector, "pagecreate", function () { a.mobile.dialog.prototype.enhance(this) }) })(a, this); (function (a, b) { a.mobile.page.prototype.options.backBtnText = "Back"; a.mobile.page.prototype.options.addBackBtn = false; a.mobile.page.prototype.options.backBtnTheme = null; a.mobile.page.prototype.options.headerTheme = "a"; a.mobile.page.prototype.options.footerTheme = "a"; a.mobile.page.prototype.options.contentTheme = null; a(c).bind("pagecreate", function (b) { var c = a(b.target), d = c.data("page").options, e = c.jqmData("role"), f = d.theme; a(":jqmData(role='header'), :jqmData(role='footer'), :jqmData(role='content')", c).jqmEnhanceable().each(function () { var b = a(this), g = b.jqmData("role"), h = b.jqmData("theme"), i = h || d.contentTheme || e === "dialog" && f, j, k, l, m; b.addClass("ui-" + g); if (g === "header" || g === "footer") { var n = h || (g === "header" ? d.headerTheme : d.footerTheme) || f; b.addClass("ui-bar-" + n).attr("role", g === "header" ? "banner" : "contentinfo"); if (g === "header") { j = b.children("a"); k = j.hasClass("ui-btn-left"); l = j.hasClass("ui-btn-right"); k = k || j.eq(0).not(".ui-btn-right").addClass("ui-btn-left").length; l = l || j.eq(1).addClass("ui-btn-right").length } if (d.addBackBtn && g === "header" && a(".ui-page").length > 1 && c.jqmData("url") !== a.mobile.path.stripHash(location.hash) && !k) { m = a("<a href='javascript:void(0);' class='ui-btn-left' data-" + a.mobile.ns + "rel='back' data-" + a.mobile.ns + "icon='arrow-l'>" + d.backBtnText + "</a>").attr("data-" + a.mobile.ns + "theme", d.backBtnTheme || n).prependTo(b) } b.children("h1, h2, h3, h4, h5, h6").addClass("ui-title").attr({ role: "heading", "aria-level": "1" }) } else if (g === "content") { if (i) { b.addClass("ui-body-" + i) } b.attr("role", "main") } }) }) })(a); (function (a, b) { a.fn.fieldcontain = function (a) { return this.addClass("ui-field-contain ui-body ui-br").contents().filter(function () { return this.nodeType === 3 && !/\S/.test(this.nodeValue) }).remove() }; a(c).bind("pagecreate create", function (b) { a(":jqmData(role='fieldcontain')", b.target).jqmEnhanceable().fieldcontain() }) })(a); (function (a, b) { a.fn.grid = function (b) { return this.each(function () { var c = a(this), d = a.extend({ grid: null }, b), e = c.children(), f = { solo: 1, a: 2, b: 3, c: 4, d: 5 }, g = d.grid, h; if (!g) { if (e.length <= 5) { for (var i in f) { if (f[i] === e.length) { g = i } } } else { g = "a"; c.addClass("ui-grid-duo") } } h = f[g]; c.addClass("ui-grid-" + g); e.filter(":nth-child(" + h + "n+1)").addClass("ui-block-a"); if (h > 1) { e.filter(":nth-child(" + h + "n+2)").addClass("ui-block-b") } if (h > 2) { e.filter(":nth-child(3n+3)").addClass("ui-block-c") } if (h > 3) { e.filter(":nth-child(4n+4)").addClass("ui-block-d") } if (h > 4) { e.filter(":nth-child(5n+5)").addClass("ui-block-e") } }) } })(a); (function (a, b) { a(c).bind("pagecreate create", function (b) { a(":jqmData(role='nojs')", b.target).addClass("ui-nojs") }) })(a); (function (a, b) { function d(a) { var b; while (a) { b = typeof a.className === "string" && a.className + " "; if (b && b.indexOf("ui-btn ") > -1 && b.indexOf("ui-disabled ") < 0) { break } a = a.parentNode } return a } a.fn.buttonMarkup = function (d) { var f = this; d = d && a.type(d) == "object" ? d : {}; for (var g = 0; g < f.length; g++) { var h = f.eq(g), i = h[0], j = a.extend({}, a.fn.buttonMarkup.defaults, { icon: d.icon !== b ? d.icon : h.jqmData("icon"), iconpos: d.iconpos !== b ? d.iconpos : h.jqmData("iconpos"), theme: d.theme !== b ? d.theme : h.jqmData("theme") || a.mobile.getInheritedTheme(h, "c"), inline: d.inline !== b ? d.inline : h.jqmData("inline"), shadow: d.shadow !== b ? d.shadow : h.jqmData("shadow"), corners: d.corners !== b ? d.corners : h.jqmData("corners"), iconshadow: d.iconshadow !== b ? d.iconshadow : h.jqmData("iconshadow"), mini: d.mini !== b ? d.mini : h.jqmData("mini") }, d), k = "ui-btn-inner", l = "ui-btn-text", m, n, o, p, q, r; a.each(j, function (b, c) { i.setAttribute("data-" + a.mobile.ns + b, c); h.jqmData(b, c) }); r = a.data(i.tagName === "INPUT" || i.tagName === "BUTTON" ? i.parentNode : i, "buttonElements"); if (r) { i = r.outer; h = a(i); o = r.inner; p = r.text; a(r.icon).remove(); r.icon = null } else { o = c.createElement(j.wrapperEls); p = c.createElement(j.wrapperEls) } q = j.icon ? c.createElement("span") : null; if (e && !r) { e() } if (!j.theme) { j.theme = a.mobile.getInheritedTheme(h, "c") } m = "ui-btn ui-btn-up-" + j.theme; m += j.inline ? " ui-btn-inline" : ""; m += j.shadow ? " ui-shadow" : ""; m += j.corners ? " ui-btn-corner-all" : ""; if (j.mini !== b) { m += j.mini ? " ui-mini" : " ui-fullsize" } if (j.inline !== b) { m += j.inline === false ? " ui-btn-block" : " ui-btn-inline" } if (j.icon) { j.icon = "ui-icon-" + j.icon; j.iconpos = j.iconpos || "left"; n = "ui-icon " + j.icon; if (j.iconshadow) { n += " ui-icon-shadow" } } if (j.iconpos) { m += " ui-btn-icon-" + j.iconpos; if (j.iconpos == "notext" && !h.attr("title")) { h.attr("title", h.getEncodedText()) } } k += j.corners ? " ui-btn-corner-all" : ""; if (j.iconpos && j.iconpos === "notext" && !h.attr("title")) { h.attr("title", h.getEncodedText()) } if (r) { h.removeClass(r.bcls || "") } h.removeClass("ui-link").addClass(m); o.className = k; p.className = l; if (!r) { o.appendChild(p) } if (q) { q.className = n; if (!(r && r.icon)) { q.appendChild(c.createTextNode(" ")); o.appendChild(q) } } while (i.firstChild && !r) { p.appendChild(i.firstChild) } if (!r) { i.appendChild(o) } r = { bcls: m, outer: i, inner: o, text: p, icon: q }; a.data(i, "buttonElements", r); a.data(o, "buttonElements", r); a.data(p, "buttonElements", r); if (q) { a.data(q, "buttonElements", r) } } return this }; a.fn.buttonMarkup.defaults = { corners: true, shadow: true, iconshadow: true, wrapperEls: "span" }; var e = function () { var b = a.mobile.buttonMarkup.hoverDelay, f, g; a(c).bind({ "vmousedown vmousecancel vmouseup vmouseover vmouseout focus blur scrollstart": function (c) { var e, h = a(d(c.target)), i = c.type; if (h.length) { e = h.attr("data-" + a.mobile.ns + "theme"); if (i === "vmousedown") { if (a.support.touch) { f = setTimeout(function () { h.removeClass("ui-btn-up-" + e).addClass("ui-btn-down-" + e) }, b) } else { h.removeClass("ui-btn-up-" + e).addClass("ui-btn-down-" + e) } } else if (i === "vmousecancel" || i === "vmouseup") { h.removeClass("ui-btn-down-" + e).addClass("ui-btn-up-" + e) } else if (i === "vmouseover" || i === "focus") { if (a.support.touch) { g = setTimeout(function () { h.removeClass("ui-btn-up-" + e).addClass("ui-btn-hover-" + e) }, b) } else { h.removeClass("ui-btn-up-" + e).addClass("ui-btn-hover-" + e) } } else if (i === "vmouseout" || i === "blur" || i === "scrollstart") { h.removeClass("ui-btn-hover-" + e + " ui-btn-down-" + e).addClass("ui-btn-up-" + e); if (f) { clearTimeout(f) } if (g) { clearTimeout(g) } } } }, "focusin focus": function (b) { a(d(b.target)).addClass(a.mobile.focusClass) }, "focusout blur": function (b) { a(d(b.target)).removeClass(a.mobile.focusClass) } }); e = null }; a(c).bind("pagecreate create", function (b) { a(":jqmData(role='button'), .ui-bar > a, .ui-header > a, .ui-footer > a, .ui-bar > :jqmData(role='controlgroup') > a", b.target).not(".ui-btn, :jqmData(role='none'), :jqmData(role='nojs')").buttonMarkup() }) })(a); (function (a, b) { a.widget("mobile.collapsible", a.mobile.widget, { options: { expandCueText: " click to expand contents", collapseCueText: " click to collapse contents", collapsed: true, heading: "h1,h2,h3,h4,h5,h6,legend", theme: null, contentTheme: null, iconTheme: "d", mini: false, initSelector: ":jqmData(role='collapsible')" }, _create: function () { var b = this.element, c = this.options, d = b.addClass("ui-collapsible"), e = b.children(c.heading).first(), f = d.wrapInner("<div class='ui-collapsible-content'></div>").find(".ui-collapsible-content"), g = b.closest(":jqmData(role='collapsible-set')").addClass("ui-collapsible-set"); if (e.is("legend")) { e = a("<div role='heading'>" + e.html() + "</div>").insertBefore(e); e.next().remove() } if (g.length) { if (!c.theme) { c.theme = g.jqmData("theme") || a.mobile.getInheritedTheme(g, "c") } if (!c.contentTheme) { c.contentTheme = g.jqmData("content-theme") } if (!c.iconPos) { c.iconPos = g.jqmData("iconpos") } if (!c.mini) { c.mini = g.jqmData("mini") } } f.addClass(c.contentTheme ? "ui-body-" + c.contentTheme : ""); e.insertBefore(f).addClass("ui-collapsible-heading").append("<span class='ui-collapsible-heading-status'></span>").wrapInner("<a href='#' class='ui-collapsible-heading-toggle'></a>").find("a").first().buttonMarkup({ shadow: false, corners: false, iconpos: b.jqmData("iconpos") || c.iconPos || "left", icon: "plus", mini: c.mini, theme: c.theme }).add(".ui-btn-inner", b).addClass("ui-corner-top ui-corner-bottom"); d.bind("expand collapse", function (b) { if (!b.isDefaultPrevented()) { b.preventDefault(); var h = a(this), i = b.type === "collapse", j = c.contentTheme; e.toggleClass("ui-collapsible-heading-collapsed", i).find(".ui-collapsible-heading-status").text(i ? c.expandCueText : c.collapseCueText).end().find(".ui-icon").toggleClass("ui-icon-minus", !i).toggleClass("ui-icon-plus", i).end().find("a").first().removeClass(a.mobile.activeBtnClass); h.toggleClass("ui-collapsible-collapsed", i); f.toggleClass("ui-collapsible-content-collapsed", i).attr("aria-hidden", i); if (j && (!g.length || d.jqmData("collapsible-last"))) { e.find("a").first().add(e.find(".ui-btn-inner")).toggleClass("ui-corner-bottom", i); f.toggleClass("ui-corner-bottom", !i) } f.trigger("updatelayout") } }).trigger(c.collapsed ? "collapse" : "expand"); e.bind("tap", function (b) { e.find("a").first().addClass(a.mobile.activeBtnClass) }).bind("click", function (a) { var b = e.is(".ui-collapsible-heading-collapsed") ? "expand" : "collapse"; d.trigger(b); a.preventDefault(); a.stopPropagation() }) } }); a(c).bind("pagecreate create", function (b) { a.mobile.collapsible.prototype.enhanceWithin(b.target) }) })(a); (function (a, b) { a.widget("mobile.collapsibleset", a.mobile.widget, { options: { initSelector: ":jqmData(role='collapsible-set')" }, _create: function () { var c = this.element.addClass("ui-collapsible-set"), d = this.options; if (!d.theme) { d.theme = a.mobile.getInheritedTheme(c, "c") } if (!d.contentTheme) { d.contentTheme = c.jqmData("content-theme") } if (!d.corners) { d.corners = c.jqmData("corners") === b ? true : false } if (!c.jqmData("collapsiblebound")) { c.jqmData("collapsiblebound", true).bind("expand collapse", function (b) { var c = b.type === "collapse", d = a(b.target).closest(".ui-collapsible"), e = d.data("collapsible"), f = e.options.contentTheme; if (f && d.jqmData("collapsible-last")) { d.find(e.options.heading).first().find("a").first().toggleClass("ui-corner-bottom", c).find(".ui-btn-inner").toggleClass("ui-corner-bottom", c); d.find(".ui-collapsible-content").toggleClass("ui-corner-bottom", !c) } }).bind("expand", function (b) { a(b.target).closest(".ui-collapsible").siblings(".ui-collapsible").trigger("collapse") }) } }, _init: function () { this.refresh() }, refresh: function () { var b = this.element, c = this.options, d = b.children(":jqmData(role='collapsible')"); a.mobile.collapsible.prototype.enhance(d.not(".ui-collapsible")); d.each(function () { a(this).find(a.mobile.collapsible.prototype.options.heading).find("a").first().removeClass("ui-corner-top ui-corner-bottom").find(".ui-btn-inner").removeClass("ui-corner-top ui-corner-bottom") }); d.first().find("a").first().addClass(c.corners ? "ui-corner-top" : "").find(".ui-btn-inner").addClass("ui-corner-top"); d.last().jqmData("collapsible-last", true).find("a").first().addClass(c.corners ? "ui-corner-bottom" : "").find(".ui-btn-inner").addClass("ui-corner-bottom") } }); a(c).bind("pagecreate create", function (b) { a.mobile.collapsibleset.prototype.enhanceWithin(b.target) }) })(a); (function (a, b) { a.widget("mobile.navbar", a.mobile.widget, { options: { iconpos: "top", grid: null, initSelector: ":jqmData(role='navbar')" }, _create: function () { var c = this.element, d = c.find("a"), e = d.filter(":jqmData(icon)").length ? this.options.iconpos : b; c.addClass("ui-navbar ui-mini").attr("role", "navigation").find("ul").jqmEnhanceable().grid({ grid: this.options.grid }); d.buttonMarkup({ corners: false, shadow: false, inline: true, iconpos: e }); c.delegate("a", "vclick", function (b) { if (!a(b.target).hasClass("ui-disabled")) { d.removeClass(a.mobile.activeBtnClass); a(this).addClass(a.mobile.activeBtnClass) } }); c.closest(".ui-page").bind("pagebeforeshow", function () { d.filter(".ui-state-persist").addClass(a.mobile.activeBtnClass) }) } }); a(c).bind("pagecreate create", function (b) { a.mobile.navbar.prototype.enhanceWithin(b.target) }) })(a); (function (a, b) { var d = {}; a.widget("mobile.listview", a.mobile.widget, { options: { theme: null, countTheme: "c", headerTheme: "b", dividerTheme: "b", splitIcon: "arrow-r", splitTheme: "b", inset: false, initSelector: ":jqmData(role='listview')" }, _create: function () { var a = this, b = ""; b += a.options.inset ? " ui-listview-inset ui-corner-all ui-shadow " : ""; a.element.addClass(function (a, c) { return c + " ui-listview " + b }); a.refresh(true) }, _removeCorners: function (a, b) { var c = "ui-corner-top ui-corner-tr ui-corner-tl", d = "ui-corner-bottom ui-corner-br ui-corner-bl"; a = a.add(a.find(".ui-btn-inner, .ui-li-link-alt, .ui-li-thumb")); if (b === "top") { a.removeClass(c) } else if (b === "bottom") { a.removeClass(d) } else { a.removeClass(c + " " + d) } }, _refreshCorners: function (a) { var b, c, d, e; if (this.options.inset) { b = this.element.children("li"); c = a ? b.not(".ui-screen-hidden") : b.filter(":visible"); this._removeCorners(b); d = c.first().addClass("ui-corner-top"); d.add(d.find(".ui-btn-inner").not(".ui-li-link-alt span:first-child")).addClass("ui-corner-top").end().find(".ui-li-link-alt, .ui-li-link-alt span:first-child").addClass("ui-corner-tr").end().find(".ui-li-thumb").not(".ui-li-icon").addClass("ui-corner-tl"); e = c.last().addClass("ui-corner-bottom"); e.add(e.find(".ui-btn-inner")).find(".ui-li-link-alt").addClass("ui-corner-br").end().find(".ui-li-thumb").not(".ui-li-icon").addClass("ui-corner-bl") } if (!a) { this.element.trigger("updatelayout") } }, _findFirstElementByTagName: function (a, b, c, d) { var e = {}; e[c] = e[d] = true; while (a) { if (e[a.nodeName]) { return a } a = a[b] } return null }, _getChildrenByTagName: function (b, c, d) { var e = [], f = {}; f[c] = f[d] = true; b = b.firstChild; while (b) { if (f[b.nodeName]) { e.push(b) } b = b.nextSibling } return a(e) }, _addThumbClasses: function (b) { var c, d, e = b.length; for (c = 0; c < e; c++) { d = a(this._findFirstElementByTagName(b[c].firstChild, "nextSibling", "img", "IMG")); if (d.length) { d.addClass("ui-li-thumb"); a(this._findFirstElementByTagName(d[0].parentNode, "parentNode", "li", "LI")).addClass(d.is(".ui-li-icon") ? "ui-li-has-icon" : "ui-li-has-thumb") } } }, refresh: function (b) { this.parentPage = this.element.closest(".ui-page"); this._createSubPages(); var d = this.options, e = this.element, f = this, g = e.jqmData("dividertheme") || d.dividerTheme, h = e.jqmData("splittheme"), i = e.jqmData("spliticon"), j = this._getChildrenByTagName(e[0], "li", "LI"), k = a.support.cssPseudoElement || !a.nodeName(e[0], "ol") ? 0 : 1, l = {}, m, n, o, p, q, r, s, t, u, v, w; if (k) { e.find(".ui-li-dec").remove() } if (!d.theme) { d.theme = a.mobile.getInheritedTheme(this.element, "c") } for (var x = 0, y = j.length; x < y; x++) { m = j.eq(x); n = "ui-li"; if (b || !m.hasClass("ui-li")) { o = m.jqmData("theme") || d.theme; p = this._getChildrenByTagName(m[0], "a", "A"); var z = m.jqmData("role") === "list-divider"; if (p.length && !z) { t = m.jqmData("icon"); m.buttonMarkup({ wrapperEls: "div", shadow: false, corners: false, iconpos: "right", icon: p.length > 1 || t === false ? false : t || "arrow-r", theme: o }); if (t != false && p.length == 1) { m.addClass("ui-li-has-arrow") } p.first().removeClass("ui-link").addClass("ui-link-inherit"); if (p.length > 1) { n += " ui-li-has-alt"; q = p.last(); r = h || q.jqmData("theme") || d.splitTheme; w = q.jqmData("icon"); q.appendTo(m).attr("title", q.getEncodedText()).addClass("ui-li-link-alt").empty().buttonMarkup({ shadow: false, corners: false, theme: o, icon: false, iconpos: "notext" }).find(".ui-btn-inner").append(a(c.createElement("span")).buttonMarkup({ shadow: true, corners: true, theme: r, iconpos: "notext", icon: w || t || i || d.splitIcon })) } } else if (z) { n += " ui-li-divider ui-bar-" + g; m.attr("role", "heading"); if (k) { k = 1 } } else { n += " ui-li-static ui-body-" + o } } if (k && n.indexOf("ui-li-divider") < 0) { s = m.is(".ui-li-static:first") ? m : m.find(".ui-link-inherit"); s.addClass("ui-li-jsnumbering").prepend("<span class='ui-li-dec'>" + k++ + ". </span>") } if (!l[n]) { l[n] = [] } l[n].push(m[0]) } for (n in l) { a(l[n]).addClass(n).children(".ui-btn-inner").addClass(n) } e.find("h1, h2, h3, h4, h5, h6").addClass("ui-li-heading").end().find("p, dl").addClass("ui-li-desc").end().find(".ui-li-aside").each(function () { var b = a(this); b.prependTo(b.parent()) }).end().find(".ui-li-count").each(function () { a(this).closest("li").addClass("ui-li-has-count") }).addClass("ui-btn-up-" + (e.jqmData("counttheme") || this.options.countTheme) + " ui-btn-corner-all"); this._addThumbClasses(j); this._addThumbClasses(e.find(".ui-link-inherit")); this._refreshCorners(b) }, _idStringEscape: function (a) { return a.replace(/[^a-zA-Z0-9]/g, "-") }, _createSubPages: function () { var b = this.element, c = b.closest(".ui-page"), e = c.jqmData("url"), f = e || c[0][a.expando], g = b.attr("id"), h = this.options, i = "data-" + a.mobile.ns, j = this, k = c.find(":jqmData(role='footer')").jqmData("id"), l; if (typeof d[f] === "undefined") { d[f] = -1 } g = g || ++d[f]; a(b.find("li>ul, li>ol").toArray().reverse()).each(function (c) { var d = this, f = a(this), j = f.attr("id") || g + "-" + c, m = f.parent(), n = a(f.prevAll().toArray().reverse()), n = n.length ? n : a("<span>" + a.trim(m.contents()[0].nodeValue) + "</span>"), p = n.first().getEncodedText(), q = (e || "") + "&" + a.mobile.subPageUrlKey + "=" + j, r = f.jqmData("theme") || h.theme, s = f.jqmData("counttheme") || b.jqmData("counttheme") || h.countTheme, t, u; l = true; t = f.detach().wrap("<div " + i + "role='page' " + i + "url='" + q + "' " + i + "theme='" + r + "' " + i + "count-theme='" + s + "'><div " + i + "role='content'></div></div>").parent().before("<div " + i + "role='header' " + i + "theme='" + h.headerTheme + "'><div class='ui-title'>" + p + "</div></div>").after(k ? a("<div " + i + "role='footer' " + i + "id='" + k + "'>") : "").parent().appendTo(a.mobile.pageContainer); t.page(); u = m.find("a:first"); if (!u.length) { u = a("<a/>").html(n || p).prependTo(m.empty()) } u.attr("href", "#" + q) }).listview(); if (l && c.is(":jqmData(external-page='true')") && c.data("page").options.domCache === false) { var m = function (b, d) { var f = d.nextPage, g, h = new a.Event("pageremove"); if (d.nextPage) { g = f.jqmData("url"); if (g.indexOf(e + "&" + a.mobile.subPageUrlKey) !== 0) { j.childPages().remove(); c.trigger(h); if (!h.isDefaultPrevented()) { c.removeWithDependents() } } } }; c.unbind("pagehide.remove").bind("pagehide.remove", m) } }, childPages: function () { var b = this.parentPage.jqmData("url"); return a(":jqmData(url^='" + b + "&" + a.mobile.subPageUrlKey + "')") } }); a(c).bind("pagecreate create", function (b) { a.mobile.listview.prototype.enhanceWithin(b.target) }) })(a); (function (a, b) { a.widget("mobile.checkboxradio", a.mobile.widget, { options: { theme: null, initSelector: "input[type='checkbox'],input[type='radio']" }, _create: function () { var d = this, e = this.element, f = function (a, b) { return a.jqmData(b) || a.closest("form,fieldset").jqmData(b) }, g = a(e).closest("label"), h = g.length ? g : a(e).closest("form,fieldset,:jqmData(role='page'),:jqmData(role='dialog')").find("label").filter("[for='" + e[0].id + "']"), i = e[0].type, j = f(e, "mini"), k = i + "-on", l = i + "-off", m = e.parents(":jqmData(type='horizontal')").length ? b : l, n = f(e, "iconpos"), o = m ? "" : " " + a.mobile.activeBtnClass, p = "ui-" + k + o, q = "ui-" + l, r = "ui-icon-" + k, s = "ui-icon-" + l; if (i !== "checkbox" && i !== "radio") { return } a.extend(this, { label: h, inputtype: i, checkedClass: p, uncheckedClass: q, checkedicon: r, uncheckedicon: s }); if (!this.options.theme) { this.options.theme = a.mobile.getInheritedTheme(this.element, "c") } h.buttonMarkup({ theme: this.options.theme, icon: m, shadow: false, mini: j, iconpos: n }); var t = c.createElement("div"); t.className = "ui-" + i; e.add(h).wrapAll(t); h.bind({ vmouseover: function (b) { if (a(this).parent().is(".ui-disabled")) { b.stopPropagation() } }, vclick: function (a) { if (e.is(":disabled")) { a.preventDefault(); return } d._cacheVals(); e.prop("checked", i === "radio" && true || !e.prop("checked")); e.triggerHandler("click"); d._getInputSet().not(e).prop("checked", false); d._updateAll(); return false } }); e.bind({ vmousedown: function () { d._cacheVals() }, vclick: function () { var b = a(this); if (b.is(":checked")) { b.prop("checked", true); d._getInputSet().not(b).prop("checked", false) } else { b.prop("checked", false) } d._updateAll() }, focus: function () { h.addClass(a.mobile.focusClass) }, blur: function () { h.removeClass(a.mobile.focusClass) } }); this.refresh() }, _cacheVals: function () { this._getInputSet().each(function () { a(this).jqmData("cacheVal", this.checked) }) }, _getInputSet: function () { if (this.inputtype === "checkbox") { return this.element } return this.element.closest("form,fieldset,:jqmData(role='page')").find("input[name='" + this.element[0].name + "'][type='" + this.inputtype + "']") }, _updateAll: function () { var b = this; this._getInputSet().each(function () { var c = a(this); if (this.checked || b.inputtype === "checkbox") { c.trigger("change") } }).checkboxradio("refresh") }, refresh: function () { var a = this.element[0], b = this.label, c = b.find(".ui-icon"); if (a.checked) { b.addClass(this.checkedClass).removeClass(this.uncheckedClass); c.addClass(this.checkedicon).removeClass(this.uncheckedicon) } else { b.removeClass(this.checkedClass).addClass(this.uncheckedClass); c.removeClass(this.checkedicon).addClass(this.uncheckedicon) } if (a.disabled) { this.disable() } else { this.enable() } }, disable: function () { this.element.prop("disabled", true).parent().addClass("ui-disabled") }, enable: function () { this.element.prop("disabled", false).parent().removeClass("ui-disabled") } }); a(c).bind("pagecreate create", function (b) { a.mobile.checkboxradio.prototype.enhanceWithin(b.target, true) }) })(a); (function (a, b) { a.widget("mobile.button", a.mobile.widget, { options: { theme: null, icon: null, iconpos: null, inline: false, corners: true, shadow: true, iconshadow: true, initSelector: "button, [type='button'], [type='submit'], [type='reset'], [type='image']", mini: false }, _create: function () { var d = this.element, e, f = this.options, g, h, i = "", j; if (d[0].tagName === "A") { !d.hasClass("ui-btn") && d.buttonMarkup(); return } if (!this.options.theme) { this.options.theme = a.mobile.getInheritedTheme(this.element, "c") } if (!! ~d[0].className.indexOf("ui-btn-left")) { i = "ui-btn-left" } if (!! ~d[0].className.indexOf("ui-btn-right")) { i = "ui-btn-right" } if (d.attr("type") === "submit" || d.attr("type") === "reset") { i ? i += " ui-submit" : i = "ui-submit" } a("label[for='" + d.attr("id") + "']").addClass("ui-submit"); this.button = a("<div></div>").text(d.text() || d.val()).insertBefore(d).buttonMarkup({ theme: f.theme, icon: f.icon, iconpos: f.iconpos, inline: f.inline, corners: f.corners, shadow: f.shadow, iconshadow: f.iconshadow, mini: f.mini }).addClass(i).append(d.addClass("ui-btn-hidden")); e = this.button; g = d.attr("type"); h = d.attr("name"); if (g !== "button" && g !== "reset" && h) { d.bind("vclick", function () { if (j === b) { j = a("<input>", { type: "hidden", name: d.attr("name"), value: d.attr("value") }).insertBefore(d); a(c).one("submit", function () { j.remove(); j = b }) } }) } d.bind({ focus: function () { e.addClass(a.mobile.focusClass) }, blur: function () { e.removeClass(a.mobile.focusClass) } }); this.refresh() }, enable: function () { this.element.attr("disabled", false); this.button.removeClass("ui-disabled").attr("aria-disabled", false); return this._setOption("disabled", false) }, disable: function () { this.element.attr("disabled", true); this.button.addClass("ui-disabled").attr("aria-disabled", true); return this._setOption("disabled", true) }, refresh: function () { var b = this.element; if (b.prop("disabled")) { this.disable() } else { this.enable() } a(this.button.data("buttonElements").text).text(b.text() || b.val()) } }); a(c).bind("pagecreate create", function (b) { a.mobile.button.prototype.enhanceWithin(b.target, true) }) })(a); (function (a, b) { a.fn.controlgroup = function (b) { function c(a, b) { a.removeClass("ui-btn-corner-all ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-controlgroup-last ui-shadow").eq(0).addClass(b[0]).end().last().addClass(b[1]).addClass("ui-controlgroup-last") } return this.each(function () { var d = a(this), e = a.extend({ direction: d.jqmData("type") || "vertical", shadow: false, excludeInvisible: true, mini: d.jqmData("mini") }, b), f = d.children("legend"), g = e.direction == "horizontal" ? ["ui-corner-left", "ui-corner-right"] : ["ui-corner-top", "ui-corner-bottom"], h = d.find("input").first().attr("type"); d.wrapInner("<div class='ui-controlgroup-controls'></div>"); if (f.length) { a("<div role='heading' class='ui-controlgroup-label'>" + f.html() + "</div>").insertBefore(d.children(0)); f.remove() } d.addClass("ui-corner-all ui-controlgroup ui-controlgroup-" + e.direction); c(d.find(".ui-btn" + (e.excludeInvisible ? ":visible" : "")).not(".ui-slider-handle"), g); c(d.find(".ui-btn-inner"), g); if (e.shadow) { d.addClass("ui-shadow") } if (e.mini) { d.addClass("ui-mini") } }) } })(a); (function (a, b) { a(c).bind("pagecreate create", function (b) { a(b.target).find("a").jqmEnhanceable().not(".ui-btn, .ui-link-inherit, :jqmData(role='none'), :jqmData(role='nojs')").addClass("ui-link") }) })(a); (function (a) { var b = a("meta[name=viewport]"), c = b.attr("content"), d = c + ",maximum-scale=1, user-scalable=no", e = c + ",maximum-scale=10, user-scalable=yes", f = /(user-scalable[\s]*=[\s]*no)|(maximum-scale[\s]*=[\s]*1)[$,\s]/.test(c); a.mobile.zoom = a.extend({}, { enabled: !f, locked: false, disable: function (c) { if (!f && !a.mobile.zoom.locked) { b.attr("content", d); a.mobile.zoom.enabled = false; a.mobile.zoom.locked = c || false } }, enable: function (c) { if (!f && (!a.mobile.zoom.locked || c === true)) { b.attr("content", e); a.mobile.zoom.enabled = true; a.mobile.zoom.locked = false } }, restore: function () { if (!f) { b.attr("content", c); a.mobile.zoom.enabled = true } } }) })(a); (function (a, d) { a.widget("mobile.textinput", a.mobile.widget, { options: { theme: null, preventFocusZoom: /iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1, initSelector: "input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input[type='time'], input[type='date'], input[type='month'], input[type='week'], input[type='datetime'], input[type='datetime-local'], input[type='color'], input:not([type])", clearSearchButtonText: "clear text" }, _create: function () { var d = this.element, e = this.options, f = e.theme || a.mobile.getInheritedTheme(this.element, "c"), g = " ui-body-" + f, h = d.jqmData("mini") == true, i = h ? " ui-mini" : "", j, k; a("label[for='" + d.attr("id") + "']").addClass("ui-input-text"); j = d.addClass("ui-input-text ui-body-" + f); if (typeof d[0].autocorrect !== "undefined" && !a.support.touchOverflow) { d[0].setAttribute("autocorrect", "off"); d[0].setAttribute("autocomplete", "off") } if (d.is("[type='search'],:jqmData(type='search')")) { j = d.wrap("<div class='ui-input-search ui-shadow-inset ui-btn-corner-all ui-btn-shadow ui-icon-searchfield" + g + i + "'></div>").parent(); k = a("<a href='#' class='ui-input-clear' title='" + e.clearSearchButtonText + "'>" + e.clearSearchButtonText + "</a>").bind("click", function (a) { d.val("").focus().trigger("change"); k.addClass("ui-input-clear-hidden"); a.preventDefault() }).appendTo(j).buttonMarkup({ icon: "delete", iconpos: "notext", corners: true, shadow: true, mini: h }); function l() { setTimeout(function () { k.toggleClass("ui-input-clear-hidden", !d.val()) }, 0) } l(); d.bind("paste cut keyup focus change blur", l) } else { d.addClass("ui-corner-all ui-shadow-inset" + g + i) } d.focus(function () { j.addClass(a.mobile.focusClass) }).blur(function () { j.removeClass(a.mobile.focusClass) }).bind("focus", function () { if (e.preventFocusZoom) { a.mobile.zoom.disable(true) } }).bind("blur", function () { if (e.preventFocusZoom) { a.mobile.zoom.enable(true) } }); if (d.is("textarea")) { var m = 15, n = 100, o = function () { var a = d[0].scrollHeight, b = d[0].clientHeight; if (b < a) { d.height(a + m) } }, p; d.keyup(function () { clearTimeout(p); p = setTimeout(o, n) }); a(c).one("pagechange", o); if (a.trim(d.val())) { a(b).load(o) } } }, disable: function () { (this.element.attr("disabled", true).is("[type='search'],:jqmData(type='search')") ? this.element.parent() : this.element).addClass("ui-disabled") }, enable: function () { (this.element.attr("disabled", false).is("[type='search'],:jqmData(type='search')") ? this.element.parent() : this.element).removeClass("ui-disabled") } }); a(c).bind("pagecreate create", function (b) { a.mobile.textinput.prototype.enhanceWithin(b.target, true) }) })(a); (function (a, b) { a.mobile.listview.prototype.options.filter = false; a.mobile.listview.prototype.options.filterPlaceholder = "Filter items..."; a.mobile.listview.prototype.options.filterTheme = "c"; a.mobile.listview.prototype.options.filterCallback = function (a, b) { return a.toLowerCase().indexOf(b) === -1 }; a(c).delegate(":jqmData(role='listview')", "listviewcreate", function () { var b = a(this), c = b.data("listview"); if (!c.options.filter) { return } var d = a("<form>", { "class": "ui-listview-filter ui-bar-" + c.options.filterTheme, role: "search" }), e = a("<input>", { placeholder: c.options.filterPlaceholder }).attr("data-" + a.mobile.ns + "type", "search").jqmData("lastval", "").bind("keyup change", function () { var d = a(this), e = this.value.toLowerCase(), f = null, g = d.jqmData("lastval") + "", h = false, i = "", j; d.jqmData("lastval", e); if (e.length < g.length || e.indexOf(g) !== 0) { f = b.children() } else { f = b.children(":not(.ui-screen-hidden)") } if (e) { for (var k = f.length - 1; k >= 0; k--) { j = a(f[k]); i = j.jqmData("filtertext") || j.text(); if (j.is("li:jqmData(role=list-divider)")) { j.toggleClass("ui-filter-hidequeue", !h); h = false } else if (c.options.filterCallback(i, e)) { j.toggleClass("ui-filter-hidequeue", true) } else { h = true } } f.filter(":not(.ui-filter-hidequeue)").toggleClass("ui-screen-hidden", false); f.filter(".ui-filter-hidequeue").toggleClass("ui-screen-hidden", true).toggleClass("ui-filter-hidequeue", false) } else { f.toggleClass("ui-screen-hidden", false) } c._refreshCorners() }).appendTo(d).textinput(); if (c.options.inset) { d.addClass("ui-listview-filter-inset") } d.bind("submit", function () { return false }).insertBefore(b) }) })(a); (function (a, d) { a.widget("mobile.slider", a.mobile.widget, { options: { theme: null, trackTheme: null, disabled: false, initSelector: "input[type='range'], :jqmData(type='range'), :jqmData(role='slider')", mini: false }, _create: function () { var e = this, f = this.element, g = a.mobile.getInheritedTheme(f, "c"), h = this.options.theme || g, i = this.options.trackTheme || g, j = f[0].nodeName.toLowerCase(), k = j == "select" ? "ui-slider-switch" : "", l = f.attr("id"), m = a("[for='" + l + "']"), n = m.attr("id") || l + "-label", o = m.attr("id", n), p = function () { return j == "input" ? parseFloat(f.val()) : f[0].selectedIndex }, q = j == "input" ? parseFloat(f.attr("min")) : 0, r = j == "input" ? parseFloat(f.attr("max")) : f.find("option").length - 1, s = b.parseFloat(f.attr("step") || 1), t = this.options.inline || f.jqmData("inline") == true ? " ui-slider-inline" : "", u = this.options.mini || f.jqmData("mini") ? " ui-slider-mini" : "", v = c.createElement("a"), w = a(v), x = c.createElement("div"), y = a(x), z = f.jqmData("highlight") && j != "select" ? function () { var b = c.createElement("div"); b.className = "ui-slider-bg " + a.mobile.activeBtnClass + " ui-btn-corner-all"; return a(b).prependTo(y) } () : false, A; v.setAttribute("href", "#"); x.setAttribute("role", "application"); x.className = ["ui-slider ", k, " ui-btn-down-", i, " ui-btn-corner-all", t, u].join(""); v.className = "ui-slider-handle"; x.appendChild(v); w.buttonMarkup({ corners: true, theme: h, shadow: true }).attr({ role: "slider", "aria-valuemin": q, "aria-valuemax": r, "aria-valuenow": p(), "aria-valuetext": p(), title: p(), "aria-labelledby": n }); a.extend(this, { slider: y, handle: w, valuebg: z, dragging: false, beforeStart: null, userModified: false, mouseMoved: false }); if (j == "select") { var B = c.createElement("div"); B.className = "ui-slider-inneroffset"; for (var C = 0, D = x.childNodes.length; C < D; C++) { B.appendChild(x.childNodes[C]) } x.appendChild(B); w.addClass("ui-slider-handle-snapping"); A = f.find("option"); for (var E = 0, F = A.length; E < F; E++) { var G = !E ? "b" : "a", H = !E ? " ui-btn-down-" + i : " " + a.mobile.activeBtnClass, I = c.createElement("div"), J = c.createElement("span"); J.className = ["ui-slider-label ui-slider-label-", G, H, " ui-btn-corner-all"].join(""); J.setAttribute("role", "img"); J.appendChild(c.createTextNode(A[E].innerHTML)); a(J).prependTo(y) } e._labels = a(".ui-slider-label", y) } o.addClass("ui-slider"); f.addClass(j === "input" ? "ui-slider-input" : "ui-slider-switch").change(function () { if (!e.mouseMoved) { e.refresh(p(), true) } }).keyup(function () { e.refresh(p(), true, true) }).blur(function () { e.refresh(p(), true) }); a(c).bind("vmousemove", function (a) { if (e.dragging) { e.mouseMoved = true; if (j === "select") { w.removeClass("ui-slider-handle-snapping") } e.refresh(a); e.userModified = e.beforeStart !== f[0].selectedIndex; return false } }); y.bind("vmousedown", function (a) { e.dragging = true; e.userModified = false; e.mouseMoved = false; if (j === "select") { e.beforeStart = f[0].selectedIndex } e.refresh(a); return false }).bind("vclick", false); y.add(c).bind("vmouseup", function () { if (e.dragging) { e.dragging = false; if (j === "select") { w.addClass("ui-slider-handle-snapping"); if (e.mouseMoved) { if (e.userModified) { e.refresh(e.beforeStart == 0 ? 1 : 0) } else { e.refresh(e.beforeStart) } } else { e.refresh(e.beforeStart == 0 ? 1 : 0) } } e.mouseMoved = false; return false } }); y.insertAfter(f); if (j == "select") { this.handle.bind({ focus: function () { y.addClass(a.mobile.focusClass) }, blur: function () { y.removeClass(a.mobile.focusClass) } }) } this.handle.bind({ vmousedown: function () { a(this).focus() }, vclick: false, keydown: function (b) { var c = p(); if (e.options.disabled) { return } switch (b.keyCode) { case a.mobile.keyCode.HOME: case a.mobile.keyCode.END: case a.mobile.keyCode.PAGE_UP: case a.mobile.keyCode.PAGE_DOWN: case a.mobile.keyCode.UP: case a.mobile.keyCode.RIGHT: case a.mobile.keyCode.DOWN: case a.mobile.keyCode.LEFT: b.preventDefault(); if (!e._keySliding) { e._keySliding = true; a(this).addClass("ui-state-active") } break } switch (b.keyCode) { case a.mobile.keyCode.HOME: e.refresh(q); break; case a.mobile.keyCode.END: e.refresh(r); break; case a.mobile.keyCode.PAGE_UP: case a.mobile.keyCode.UP: case a.mobile.keyCode.RIGHT: e.refresh(c + s); break; case a.mobile.keyCode.PAGE_DOWN: case a.mobile.keyCode.DOWN: case a.mobile.keyCode.LEFT: e.refresh(c - s); break } }, keyup: function (b) { if (e._keySliding) { e._keySliding = false; a(this).removeClass("ui-state-active") } } }); this.refresh(d, d, true) }, refresh: function (b, c, d) { if (this.options.disabled || this.element.attr("disabled")) { this.disable() } var e = this.element, f, g = e[0].nodeName.toLowerCase(), h = g === "input" ? parseFloat(e.attr("min")) : 0, i = g === "input" ? parseFloat(e.attr("max")) : e.find("option").length - 1, j = g === "input" && parseFloat(e.attr("step")) > 0 ? parseFloat(e.attr("step")) : 1; if (typeof b === "object") { var k = b, l = 8; if (!this.dragging || k.pageX < this.slider.offset().left - l || k.pageX > this.slider.offset().left + this.slider.width() + l) { return } f = Math.round((k.pageX - this.slider.offset().left) / this.slider.width() * 100) } else { if (b == null) { b = g === "input" ? parseFloat(e.val() || 0) : e[0].selectedIndex } f = (parseFloat(b) - h) / (i - h) * 100 } if (isNaN(f)) { return } if (f < 0) { f = 0 } if (f > 100) { f = 100 } var m = f / 100 * (i - h) + h; var n = (m - h) % j; var o = m - n; if (Math.abs(n) * 2 >= j) { o += n > 0 ? j : -j } m = parseFloat(o.toFixed(5)); if (m < h) { m = h } if (m > i) { m = i } this.handle.css("left", f + "%"); this.handle.attr({ "aria-valuenow": g === "input" ? m : e.find("option").eq(m).attr("value"), "aria-valuetext": g === "input" ? m : e.find("option").eq(m).getEncodedText(), title: g === "input" ? m : e.find("option").eq(m).getEncodedText() }); this.valuebg && this.valuebg.css("width", f + "%"); if (this._labels) { var p = this.handle.width() / this.slider.width() * 100, q = f && p + (100 - p) * f / 100, r = f === 100 ? 0 : Math.min(p + 100 - q, 100); this._labels.each(function () { var b = a(this).is(".ui-slider-label-a"); a(this).width((b ? q : r) + "%") }) } if (!d) { var s = false; if (g === "input") { s = e.val() !== m; e.val(m) } else { s = e[0].selectedIndex !== m; e[0].selectedIndex = m } if (!c && s) { e.trigger("change") } } }, enable: function () { this.element.attr("disabled", false); this.slider.removeClass("ui-disabled").attr("aria-disabled", false); return this._setOption("disabled", false) }, disable: function () { this.element.attr("disabled", true); this.slider.addClass("ui-disabled").attr("aria-disabled", true); return this._setOption("disabled", true) } }); a(c).bind("pagecreate create", function (b) { a.mobile.slider.prototype.enhanceWithin(b.target, true) }) })(a); (function (a, d) { a.widget("mobile.selectmenu", a.mobile.widget, { options: { theme: null, disabled: false, icon: "arrow-d", iconpos: "right", inline: false, corners: true, shadow: true, iconshadow: true, overlayTheme: "a", hidePlaceholderMenuItems: true, closeText: "Close", nativeMenu: true, preventFocusZoom: /iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1, initSelector: "select:not(:jqmData(role='slider'))", mini: false }, _button: function () { return a("<div/>") }, _setDisabled: function (a) { this.element.attr("disabled", a); this.button.attr("aria-disabled", a); return this._setOption("disabled", a) }, _focusButton: function () { var a = this; setTimeout(function () { a.button.focus() }, 40) }, _selectOptions: function () { return this.select.find("option") }, _preExtension: function () { var b = ""; if (!! ~this.element[0].className.indexOf("ui-btn-left")) { b = " ui-btn-left" } if (!! ~this.element[0].className.indexOf("ui-btn-right")) { b = " ui-btn-right" } this.select = this.element.wrap("<div class='ui-select" + b + "'>"); this.selectID = this.select.attr("id"); this.label = a("label[for='" + this.selectID + "']").addClass("ui-select"); this.isMultiple = this.select[0].multiple; if (!this.options.theme) { this.options.theme = a.mobile.getInheritedTheme(this.select, "c") } }, _create: function () { this._preExtension(); this._trigger("beforeCreate"); this.button = this._button(); var c = this, d = this.options, e = d.inline || this.select.jqmData("inline"), f = d.mini || this.select.jqmData("mini"), g = d.icon ? d.iconpos || this.select.jqmData("iconpos") : false, h = this.select[0].selectedIndex == -1 ? 0 : this.select[0].selectedIndex, i = this.button.text(a(this.select[0].options.item(h)).text()).insertBefore(this.select).buttonMarkup({ theme: d.theme, icon: d.icon, iconpos: g, inline: e, corners: d.corners, shadow: d.shadow, iconshadow: d.iconshadow, mini: f }); if (d.nativeMenu && b.opera && b.opera.version) { i.addClass("ui-select-nativeonly") } if (this.isMultiple) { this.buttonCount = a("<span>").addClass("ui-li-count ui-btn-up-c ui-btn-corner-all").hide().appendTo(i.addClass("ui-li-has-count")) } if (d.disabled || this.element.attr("disabled")) { this.disable() } this.select.change(function () { c.refresh() }); this.build() }, build: function () { var b = this; this.select.appendTo(b.button).bind("vmousedown", function () { b.button.addClass(a.mobile.activeBtnClass) }).bind("focus", function () { b.button.addClass(a.mobile.focusClass) }).bind("blur", function () { b.button.removeClass(a.mobile.focusClass) }).bind("focus vmouseover", function () { b.button.trigger("vmouseover") }).bind("vmousemove", function () { b.button.removeClass(a.mobile.activeBtnClass) }).bind("change blur vmouseout", function () { b.button.trigger("vmouseout").removeClass(a.mobile.activeBtnClass) }).bind("change blur", function () { b.button.removeClass("ui-btn-down-" + b.options.theme) }); b.button.bind("vmousedown", function () { if (b.options.preventFocusZoom) { a.mobile.zoom.disable(true) } }).bind("mouseup", function () { if (b.options.preventFocusZoom) { a.mobile.zoom.enable(true) } }) }, selected: function () { return this._selectOptions().filter(":selected") }, selectedIndices: function () { var a = this; return this.selected().map(function () { return a._selectOptions().index(this) }).get() }, setButtonText: function () { var b = this, c = this.selected(); this.button.find(".ui-btn-text").text(function () { if (!b.isMultiple) { return c.text() } return c.length ? c.map(function () { return a(this).text() }).get().join(", ") : b.placeholder }) }, setButtonCount: function () { var a = this.selected(); if (this.isMultiple) { this.buttonCount[a.length > 1 ? "show" : "hide"]().text(a.length) } }, refresh: function () { this.setButtonText(); this.setButtonCount() }, open: a.noop, close: a.noop, disable: function () { this._setDisabled(true); this.button.addClass("ui-disabled") }, enable: function () { this._setDisabled(false); this.button.removeClass("ui-disabled") } }); a(c).bind("pagecreate create", function (b) { a.mobile.selectmenu.prototype.enhanceWithin(b.target, true) }) })(a); (function (a, d) { var e = function (d) { var e = d.select, f = d.selectID, g = d.label, h = d.select.closest(".ui-page"), i = a("<div>", { "class": "ui-selectmenu-screen ui-screen-hidden" }).appendTo(h), j = d._selectOptions(), k = d.isMultiple = d.select[0].multiple, l = f + "-button", m = f + "-menu", n = a("<div data-" + a.mobile.ns + "role='dialog' data-" + a.mobile.ns + "theme='" + d.options.theme + "' data-" + a.mobile.ns + "overlay-theme='" + d.options.overlayTheme + "'>" + "<div data-" + a.mobile.ns + "role='header'>" + "<div class='ui-title'>" + g.getEncodedText() + "</div>" + "</div>" + "<div data-" + a.mobile.ns + "role='content'></div>" + "</div>"), o = a("<div>", { "class": "ui-selectmenu ui-selectmenu-hidden ui-overlay-shadow ui-corner-all ui-body-" + d.options.overlayTheme + " " + a.mobile.defaultDialogTransition }).insertAfter(i), p = a("<ul>", { "class": "ui-selectmenu-list", id: m, role: "listbox", "aria-labelledby": l }).attr("data-" + a.mobile.ns + "theme", d.options.theme).appendTo(o), q = a("<div>", { "class": "ui-header ui-bar-" + d.options.theme }).prependTo(o), r = a("<h1>", { "class": "ui-title" }).appendTo(q), s, t, u; if (d.isMultiple) { u = a("<a>", { text: d.options.closeText, href: "#", "class": "ui-btn-left" }).attr("data-" + a.mobile.ns + "iconpos", "notext").attr("data-" + a.mobile.ns + "icon", "delete").appendTo(q).buttonMarkup() } a.extend(d, { select: d.select, selectID: f, buttonId: l, menuId: m, thisPage: h, menuPage: n, label: g, screen: i, selectOptions: j, isMultiple: k, theme: d.options.theme, listbox: o, list: p, header: q, headerTitle: r, headerClose: u, menuPageContent: s, menuPageClose: t, placeholder: "", build: function () { var b = this; b.refresh(); b.select.attr("tabindex", "-1").focus(function () { a(this).blur(); b.button.focus() }); b.button.bind("vclick keydown", function (c) { if (c.type == "vclick" || c.keyCode && (c.keyCode === a.mobile.keyCode.ENTER || c.keyCode === a.mobile.keyCode.SPACE)) { b.open(); c.preventDefault() } }); b.list.attr("role", "listbox").bind("focusin", function (b) { a(b.target).attr("tabindex", "0").trigger("vmouseover") }).bind("focusout", function (b) { a(b.target).attr("tabindex", "-1").trigger("vmouseout") }).delegate("li:not(.ui-disabled, .ui-li-divider)", "click", function (c) { var e = b.select[0].selectedIndex, f = b.list.find("li:not(.ui-li-divider)").index(this), g = b._selectOptions().eq(f)[0]; g.selected = b.isMultiple ? !g.selected : true; if (b.isMultiple) { a(this).find(".ui-icon").toggleClass("ui-icon-checkbox-on", g.selected).toggleClass("ui-icon-checkbox-off", !g.selected) } if (b.isMultiple || e !== f) { b.select.trigger("change") } if (b.isMultiple) { b.list.find("li:not(.ui-li-divider)").eq(f).addClass("ui-btn-down-" + d.options.theme).find("a").first().focus() } else { b.close() } c.preventDefault() }).keydown(function (b) { var c = a(b.target), e = c.closest("li"), f, g; switch (b.keyCode) { case 38: f = e.prev().not(".ui-selectmenu-placeholder"); if (f.is(".ui-li-divider")) { f = f.prev() } if (f.length) { c.blur().attr("tabindex", "-1"); f.addClass("ui-btn-down-" + d.options.theme).find("a").first().focus() } return false; break; case 40: g = e.next(); if (g.is(".ui-li-divider")) { g = g.next() } if (g.length) { c.blur().attr("tabindex", "-1"); g.addClass("ui-btn-down-" + d.options.theme).find("a").first().focus() } return false; break; case 13: case 32: c.trigger("click"); return false; break } }); b.menuPage.bind("pagehide", function () { b.list.appendTo(b.listbox); b._focusButton(); a.mobile._bindPageRemove.call(b.thisPage) }); b.screen.bind("vclick", function (a) { b.close() }); if (b.isMultiple) { b.headerClose.click(function () { if (b.menuType == "overlay") { b.close(); return false } }) } b.thisPage.addDependents(this.menuPage) }, _isRebuildRequired: function () { var a = this.list.find("li"), b = this._selectOptions(); return b.text() !== a.text() }, selected: function () { return this._selectOptions().filter(":selected:not(:jqmData(placeholder='true'))") }, refresh: function (b, c) { var d = this, e = this.element, f = this.isMultiple, g; if (b || this._isRebuildRequired()) { d._buildList() } g = this.selectedIndices(); d.setButtonText(); d.setButtonCount(); d.list.find("li:not(.ui-li-divider)").removeClass(a.mobile.activeBtnClass).attr("aria-selected", false).each(function (b) { if (a.inArray(b, g) > -1) { var c = a(this); c.attr("aria-selected", true); if (d.isMultiple) { c.find(".ui-icon").removeClass("ui-icon-checkbox-off").addClass("ui-icon-checkbox-on") } else { if (c.is(".ui-selectmenu-placeholder")) { c.next().addClass(a.mobile.activeBtnClass) } else { c.addClass(a.mobile.activeBtnClass) } } } }) }, close: function () { if (this.options.disabled || !this.isOpen) { return } var a = this; if (a.menuType == "page") { b.history.back() } else { a.screen.addClass("ui-screen-hidden"); a.listbox.addClass("ui-selectmenu-hidden").removeAttr("style").removeClass("in"); a.list.appendTo(a.listbox); a._focusButton() } a.isOpen = false }, open: function () { function q() { var b = e.list.find("." + a.mobile.activeBtnClass + " a"); if (b.length === 0) { b = e.list.find("li.ui-btn:not(:jqmData(placeholder='true')) a") } b.first().focus().closest("li").addClass("ui-btn-down-" + d.options.theme) } if (this.options.disabled) { return } var e = this, f = a(b), g = e.list.parent(), h = g.outerHeight(), i = g.outerWidth(), j = a(".ui-page-active"), k = j, l = f.scrollTop(), m = e.button.offset().top, o = f.height(), p = f.width(); e.button.addClass(a.mobile.activeBtnClass); setTimeout(function () { e.button.removeClass(a.mobile.activeBtnClass) }, 300); if (h > o - 80 || !a.support.scrollTop) { e.menuPage.appendTo(a.mobile.pageContainer).page(); e.menuPageContent = n.find(".ui-content"); e.menuPageClose = n.find(".ui-header a"); e.thisPage.unbind("pagehide.remove"); if (l == 0 && m > o) { e.thisPage.one("pagehide", function () { a(this).jqmData("lastScroll", m) }) } e.menuPage.one("pageshow", function () { q(); e.isOpen = true }); e.menuType = "page"; e.menuPageContent.append(e.list); e.menuPage.find("div .ui-title").text(e.label.text()); a.mobile.changePage(e.menuPage, { transition: a.mobile.defaultDialogTransition }) } else { e.menuType = "overlay"; e.screen.height(a(c).height()).removeClass("ui-screen-hidden"); var r = m - l, s = l + o - m, t = h / 2, u = parseFloat(e.list.parent().css("max-width")), v, w; if (r > h / 2 && s > h / 2) { v = m + e.button.outerHeight() / 2 - t } else { v = r > s ? l + o - h - 30 : l + 30 } if (i < u) { w = (p - i) / 2 } else { w = e.button.offset().left + e.button.outerWidth() / 2 - i / 2; if (w < 30) { w = 30 } else if (w + i > p) { w = p - i - 30 } } e.listbox.append(e.list).removeClass("ui-selectmenu-hidden").css({ top: v, left: w }).addClass("in"); q(); e.isOpen = true } }, _buildList: function () { var b = this, d = this.options, e = this.placeholder, f = true, g = [], h = [], i = b.isMultiple ? "checkbox-off" : "false"; b.list.empty().filter(".ui-listview").listview("destroy"); var j = b.select.find("option"), k = j.length, l = this.select[0], m = "data-" + a.mobile.ns, n = m + "option-index", o = m + "icon", p = m + "role", q = m + "placeholder", r = c.createDocumentFragment(), s = false, t; for (var u = 0; u < k; u++, s = false) { var v = j[u], w = a(v), x = v.parentNode, y = w.text(), z = c.createElement("a"), A = []; z.setAttribute("href", "#"); z.appendChild(c.createTextNode(y)); if (x !== l && x.nodeName.toLowerCase() === "optgroup") { var B = x.getAttribute("label"); if (B != t) { var C = c.createElement("li"); C.setAttribute(p, "list-divider"); C.setAttribute("role", "option"); C.setAttribute("tabindex", "-1"); C.appendChild(c.createTextNode(B)); r.appendChild(C); t = B } } if (f && (!v.getAttribute("value") || y.length == 0 || w.jqmData("placeholder"))) { f = false; s = true; v.setAttribute(q, true); if (d.hidePlaceholderMenuItems) { A.push("ui-selectmenu-placeholder") } if (!e) { e = b.placeholder = y } } var D = c.createElement("li"); if (v.disabled) { A.push("ui-disabled"); D.setAttribute("aria-disabled", true) } D.setAttribute(n, u); D.setAttribute(o, i); if (s) { D.setAttribute(q, true) } D.className = A.join(" "); D.setAttribute("role", "option"); z.setAttribute("tabindex", "-1"); D.appendChild(z); r.appendChild(D) } b.list[0].appendChild(r); if (!this.isMultiple && !e.length) { this.header.hide() } else { this.headerTitle.text(this.placeholder) } b.list.listview() }, _button: function () { return a("<a>", { href: "#", role: "button", id: this.buttonId, "aria-haspopup": "true", "aria-owns": this.menuId }) } }) }; a(c).bind("selectmenubeforecreate", function (b) { var c = a(b.target).data("selectmenu"); if (!c.options.nativeMenu) { e(c) } }) })(a); (function (a, d) { a.widget("mobile.fixedtoolbar", a.mobile.widget, { options: { visibleOnPageShow: true, disablePageZoom: true, transition: "slide", fullscreen: false, tapToggle: true, tapToggleBlacklist: "a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed", hideDuringFocus: "input, textarea, select", updatePagePadding: true, trackPersistentToolbars: true, supportBlacklist: function () { var a = b, c = navigator.userAgent, d = navigator.platform, e = c.match(/AppleWebKit\/([0-9]+)/), f = !!e && e[1], g = c.match(/Fennec\/([0-9]+)/), h = !!g && g[1], i = c.match(/Opera Mobi\/([0-9]+)/), j = !!i && i[1]; if ((d.indexOf("iPhone") > -1 || d.indexOf("iPad") > -1 || d.indexOf("iPod") > -1) && f && f < 534 || a.operamini && {}.toString.call(a.operamini) === "[object OperaMini]" || i && j < 7458 || c.indexOf("Android") > -1 && f && f < 533 || h && h < 6 || "palmGetResource" in b && f && f < 534 || c.indexOf("MeeGo") > -1 && c.indexOf("NokiaBrowser/8.5.0") > -1) { return true } return false }, initSelector: ":jqmData(position='fixed')" }, _create: function () { var a = this, b = a.options, c = a.element, d = c.is(":jqmData(role='header')") ? "header" : "footer", e = c.closest(".ui-page"); if (b.supportBlacklist()) { a.destroy(); return } c.addClass("ui-" + d + "-fixed"); if (b.fullscreen) { c.addClass("ui-" + d + "-fullscreen"); e.addClass("ui-page-" + d + "-fullscreen") } else { e.addClass("ui-page-" + d + "-fixed") } a._addTransitionClass(); a._bindPageEvents(); a._bindToggleHandlers() }, _addTransitionClass: function () { var a = this.options.transition; if (a && a !== "none") { if (a === "slide") { a = this.element.is(".ui-header") ? "slidedown" : "slideup" } this.element.addClass(a) } }, _bindPageEvents: function () { var c = this, d = c.options, e = c.element; e.closest(".ui-page").bind("pagebeforeshow", function () { if (d.disablePageZoom) { a.mobile.zoom.disable(true) } if (!d.visibleOnPageShow) { c.hide(true) } }).bind("webkitAnimationStart animationstart updatelayout", function () { var a = this; if (d.updatePagePadding) { c.updatePagePadding(a) } }).bind("pageshow", function () { var e = this; c.updatePagePadding(e); if (d.updatePagePadding) { a(b).bind("throttledresize." + c.widgetName, function () { c.updatePagePadding(e) }) } }).bind("pagebeforehide", function (e, f) { if (d.disablePageZoom) { a.mobile.zoom.enable(true) } if (d.updatePagePadding) { a(b).unbind("throttledresize." + c.widgetName) } if (d.trackPersistentToolbars) { var g = a(".ui-footer-fixed:jqmData(id)", this), h = a(".ui-header-fixed:jqmData(id)", this), i = g.length && f.nextPage && a(".ui-footer-fixed:jqmData(id='" + g.jqmData("id") + "')", f.nextPage), j = h.length && f.nextPage && a(".ui-header-fixed:jqmData(id='" + h.jqmData("id") + "')", f.nextPage); i = i || a(); if (i.length || j.length) { i.add(j).appendTo(a.mobile.pageContainer); f.nextPage.one("pageshow", function () { i.add(j).appendTo(this) }) } } }) }, _visible: true, updatePagePadding: function (b) { var c = this.element, d = c.is(".ui-header"); if (this.options.fullscreen) { return } b = b || c.closest(".ui-page"); a(b).css("padding-" + (d ? "top" : "bottom"), c.outerHeight()) }, _useTransition: function (c) { var d = a(b), e = this.element, f = d.scrollTop(), g = e.height(), h = e.closest(".ui-page").height(), i = a.mobile.getScreenHeight(), j = e.is(":jqmData(role='header')") ? "header" : "footer"; return !c && (this.options.transition && this.options.transition !== "none" && (j === "header" && !this.options.fullscreen && f > g || j === "footer" && !this.options.fullscreen && f + i < h - g) || this.options.fullscreen) }, show: function (a) { var b = "ui-fixed-hidden", c = this.element; if (this._useTransition(a)) { c.removeClass("out " + b).addClass("in") } else { c.removeClass(b) } this._visible = true }, hide: function (a) { var b = "ui-fixed-hidden", c = this.element, d = "out" + (this.options.transition === "slide" ? " reverse" : ""); if (this._useTransition(a)) { c.addClass(d).removeClass("in").animationComplete(function () { c.addClass(b).removeClass(d) }) } else { c.addClass(b).removeClass(d) } this._visible = false }, toggle: function () { this[this._visible ? "hide" : "show"]() }, _bindToggleHandlers: function () { var b = this, c = b.options, d = b.element; d.closest(".ui-page").bind("vclick", function (d) { if (c.tapToggle && !a(d.target).closest(c.tapToggleBlacklist).length) { b.toggle() } }).bind("focusin focusout", function (d) { if (screen.width < 500 && a(d.target).is(c.hideDuringFocus) && !a(d.target).closest(".ui-header-fixed, .ui-footer-fixed").length) { b[d.type === "focusin" && b._visible ? "hide" : "show"]() } }) }, destroy: function () { this.element.removeClass("ui-header-fixed ui-footer-fixed ui-header-fullscreen ui-footer-fullscreen in out fade slidedown slideup ui-fixed-hidden"); this.element.closest(".ui-page").removeClass("ui-page-header-fixed ui-page-footer-fixed ui-page-header-fullscreen ui-page-footer-fullscreen") } }); a(c).bind("pagecreate create", function (b) { if (a(b.target).jqmData("fullscreen")) { a(a.mobile.fixedtoolbar.prototype.options.initSelector, b.target).not(":jqmData(fullscreen)").jqmData("fullscreen", true) } a.mobile.fixedtoolbar.prototype.enhanceWithin(b.target) }) })(a); (function (a, b) { function i(a) { d = a.originalEvent; h = d.accelerationIncludingGravity; e = Math.abs(h.x); f = Math.abs(h.y); g = Math.abs(h.z); if (!b.orientation && (e > 7 || (g > 6 && f < 8 || g < 8 && f > 6) && e > 5)) { if (c.enabled) { c.disable() } } else if (!c.enabled) { c.enable() } } if (!(/iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1)) { return } var c = a.mobile.zoom, d, e, f, g, h; a(b).bind("orientationchange.iosorientationfix", c.enable).bind("devicemotion.iosorientationfix", i) })(a, this); (function (a, b, d) { function j() { var b = a("." + a.mobile.activeBtnClass).first(); i.css({ top: a.support.scrollTop && g.scrollTop() + g.height() / 2 || b.length && b.offset().top || 100 }) } function k() { var b = i.offset(), c = g.scrollTop(), d = a.mobile.getScreenHeight(); if (b.top < c || b.top - c > d) { i.addClass("ui-loader-fakefix"); j(); g.unbind("scroll", k).bind("scroll", j) } } function l() { e.removeClass("ui-mobile-rendering") } var e = a("html"), f = a("head"), g = a(b); a(b.document).trigger("mobileinit"); if (!a.mobile.gradeA()) { return } if (a.mobile.ajaxBlacklist) { a.mobile.ajaxEnabled = false } e.addClass("ui-mobile ui-mobile-rendering"); setTimeout(l, 5e3); var h = "ui-loader", i = a("<div class='" + h + "'><span class='ui-icon ui-icon-loading'></span><h1></h1></div>"); a.extend(a.mobile, { showPageLoadingMsg: function (b, c, d) { e.addClass("ui-loading"); if (a.mobile.loadingMessage) { var f = d || a.mobile.loadingMessageTextVisible; b = b || a.mobile.loadingMessageTheme, i.attr("class", h + " ui-corner-all ui-body-" + (b || "a") + " ui-loader-" + (f ? "verbose" : "default") + (d ? " ui-loader-textonly" : "")).find("h1").text(c || a.mobile.loadingMessage).end().appendTo(a.mobile.pageContainer); k(); g.bind("scroll", k) } }, hidePageLoadingMsg: function () { e.removeClass("ui-loading"); if (a.mobile.loadingMessage) { i.removeClass("ui-loader-fakefix") } a(b).unbind("scroll", j); a(b).unbind("scroll", k) }, initializePage: function () { var b = a(":jqmData(role='page'), :jqmData(role='dialog')"); if (!b.length) { b = a("body").wrapInner("<div data-" + a.mobile.ns + "role='page'></div>").children(0) } b.each(function () { var b = a(this); if (!b.jqmData("url")) { b.attr("data-" + a.mobile.ns + "url", b.attr("id") || location.pathname + location.search) } }); a.mobile.firstPage = b.first(); a.mobile.pageContainer = b.first().parent().addClass("ui-mobile-viewport"); g.trigger("pagecontainercreate"); a.mobile.showPageLoadingMsg(); l(); if (!(a.mobile.hashListeningEnabled && a.mobile.path.isHashValid(location.hash) && (a(location.hash + ':jqmData(role="page")').length || a.mobile.path.isPath(location.hash)))) { a.mobile.changePage(a.mobile.firstPage, { transition: "none", reverse: true, changeHash: false, fromHashChange: true }) } else { g.trigger("hashchange", [true]) } } }); a.mobile.navreadyDeferred.resolve(); a(function () { b.scrollTo(0, 1); a.mobile.defaultHomeScroll = !a.support.scrollTop || a(b).scrollTop() === 1 ? 0 : 1; if (a.fn.controlgroup) { a(c).bind("pagecreate create", function (b) { a(":jqmData(role='controlgroup')", b.target).jqmEnhanceable().controlgroup({ excludeInvisible: false }) }) } if (a.mobile.autoInitializePage) { a.mobile.initializePage() } g.load(a.mobile.silentScroll); if (!a.support.cssPointerEvents) { a(c).delegate(".ui-disabled", "vclick", function (a) { a.preventDefault(); a.stopImmediatePropagation() }) } }) })(a, this) })